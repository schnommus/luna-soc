// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : lxvid.v
// Device     : LFE5U-45F-7BG256I
// LiteX sha1 : 31aa923
// Date       : 2024-04-23 09:11:34
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module lxvid (
    input  wire          clk_hdmi,
    input  wire          clk_hdmi5x,
    input  wire          clk_sys,
    input  wire   [31:0] dma_stream_data,
    input  wire          dma_stream_first,
    input  wire          dma_stream_last,
    output wire          dma_stream_ready,
    input  wire          dma_stream_reset,
    input  wire          dma_stream_valid,
    output wire          gpdi_clk_n,
    output wire          gpdi_clk_p,
    output wire          gpdi_data0_n,
    output wire          gpdi_data0_p,
    output wire          gpdi_data1_n,
    output wire          gpdi_data1_p,
    output wire          gpdi_data2_n,
    output wire          gpdi_data2_p,
    input  wire          rst_hdmi,
    input  wire          rst_hdmi5x,
    input  wire          rst_sys
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
LxVideoCore
└─── bus (SoCBusHandler)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── cpu (CPUNone)
└─── videophy (VideoHDMIPHY)
│    └─── b_encoder_p (TMDSEncoder)
│    └─── b_serializer_p (VideoHDMI10to1Serializer)
│    │    └─── cdc (ClockDomainCrossing)
│    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    └─── gearbox (Gearbox)
│    └─── g_encoder_p (TMDSEncoder)
│    └─── g_serializer_p (VideoHDMI10to1Serializer)
│    │    └─── cdc (ClockDomainCrossing)
│    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    └─── gearbox (Gearbox)
│    └─── r_encoder_p (TMDSEncoder)
│    └─── r_serializer_p (VideoHDMI10to1Serializer)
│    │    └─── cdc (ClockDomainCrossing)
│    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    └─── gearbox (Gearbox)
│    └─── b_encoder_n (TMDSEncoder)
│    └─── b_serializer_n (VideoHDMI10to1Serializer)
│    │    └─── cdc (ClockDomainCrossing)
│    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    └─── gearbox (Gearbox)
│    └─── g_encoder_n (TMDSEncoder)
│    └─── g_serializer_n (VideoHDMI10to1Serializer)
│    │    └─── cdc (ClockDomainCrossing)
│    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    └─── gearbox (Gearbox)
│    └─── r_encoder_n (TMDSEncoder)
│    └─── r_serializer_n (VideoHDMI10to1Serializer)
│    │    └─── cdc (ClockDomainCrossing)
│    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    └─── gearbox (Gearbox)
└─── video_framebuffer_vtg (VideoTimingGenerator)
│    └─── fsm (FSM)
└─── video_framebuffer (VideoFrameBuffer)
│    └─── conv (Converter)
│    │    └─── _identityconverter_0* (_IdentityConverter)
│    └─── cdc (ClockDomainCrossing)
│    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    └─── graycounter_1* (GrayCounter)
│    └─── fsm_0* (FSM)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstorage_5* (CSRStorage)
│    │    └─── csrstorage_6* (CSRStorage)
│    │    └─── csrstorage_7* (CSRStorage)
│    │    └─── csrstorage_8* (CSRStorage)
└─── csr_interconnect (InterconnectShared)
└─── [ODDRX1F]
└─── [ODDRX1F]
└─── [ODDRX1F]
└─── [ODDRX1F]
└─── [ODDRX1F]
└─── [ODDRX1F]
└─── [ODDRX1F]
└─── [ODDRX1F]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire   [13:0] adr;
wire   [13:0] bank_bus_adr;
reg    [31:0] bank_bus_dat_r = 32'd0;
wire   [31:0] bank_bus_dat_w;
wire          bank_bus_we;
reg           clockdomainsrenamer_next_state = 1'd0;
reg           clockdomainsrenamer_state = 1'd0;
wire   [31:0] dat_r;
wire   [31:0] dat_w;
wire          enable0_r;
reg           enable0_re = 1'd0;
wire          enable0_w;
reg           enable0_we = 1'd0;
wire          hdmi5x_clk;
wire          hdmi5x_rst;
wire          hdmi_clk;
wire          hdmi_rst;
wire   [11:0] hres0_r;
reg           hres0_re = 1'd0;
wire   [11:0] hres0_w;
reg           hres0_we = 1'd0;
wire   [11:0] hscan0_r;
reg           hscan0_re = 1'd0;
wire   [11:0] hscan0_w;
reg           hscan0_we = 1'd0;
wire   [11:0] hsync_end0_r;
reg           hsync_end0_re = 1'd0;
wire   [11:0] hsync_end0_w;
reg           hsync_end0_we = 1'd0;
wire   [11:0] hsync_start0_r;
reg           hsync_start0_re = 1'd0;
wire   [11:0] hsync_start0_w;
reg           hsync_start0_we = 1'd0;
reg           interface0_ack = 1'd0;
reg    [29:0] interface0_adr = 30'd0;
reg           interface0_cyc = 1'd0;
reg    [31:0] interface0_dat_r = 32'd0;
reg    [31:0] interface0_dat_w = 32'd0;
reg     [3:0] interface0_sel = 4'd0;
reg           interface0_stb = 1'd0;
reg           interface0_we = 1'd0;
reg    [13:0] interface1_adr = 14'd0;
wire   [31:0] interface1_dat_r;
reg    [31:0] interface1_dat_w = 32'd0;
reg           interface1_we = 1'd0;
reg     [2:0] multiregimpl0_regs0 = 3'd0;
reg     [2:0] multiregimpl0_regs1 = 3'd0;
reg     [2:0] multiregimpl10_regs0 = 3'd0;
reg     [2:0] multiregimpl10_regs1 = 3'd0;
reg     [2:0] multiregimpl11_regs0 = 3'd0;
reg     [2:0] multiregimpl11_regs1 = 3'd0;
reg           multiregimpl12_regs0 = 1'd0;
reg           multiregimpl12_regs1 = 1'd0;
reg    [11:0] multiregimpl13_regs0 = 12'd0;
reg    [11:0] multiregimpl13_regs1 = 12'd0;
reg    [11:0] multiregimpl14_regs0 = 12'd0;
reg    [11:0] multiregimpl14_regs1 = 12'd0;
reg    [11:0] multiregimpl15_regs0 = 12'd0;
reg    [11:0] multiregimpl15_regs1 = 12'd0;
reg    [11:0] multiregimpl16_regs0 = 12'd0;
reg    [11:0] multiregimpl16_regs1 = 12'd0;
reg    [11:0] multiregimpl17_regs0 = 12'd0;
reg    [11:0] multiregimpl17_regs1 = 12'd0;
reg    [11:0] multiregimpl18_regs0 = 12'd0;
reg    [11:0] multiregimpl18_regs1 = 12'd0;
reg    [11:0] multiregimpl19_regs0 = 12'd0;
reg    [11:0] multiregimpl19_regs1 = 12'd0;
reg     [2:0] multiregimpl1_regs0 = 3'd0;
reg     [2:0] multiregimpl1_regs1 = 3'd0;
reg    [11:0] multiregimpl20_regs0 = 12'd0;
reg    [11:0] multiregimpl20_regs1 = 12'd0;
reg     [2:0] multiregimpl21_regs0 = 3'd0;
reg     [2:0] multiregimpl21_regs1 = 3'd0;
reg     [2:0] multiregimpl22_regs0 = 3'd0;
reg     [2:0] multiregimpl22_regs1 = 3'd0;
reg           multiregimpl23_regs0 = 1'd0;
reg           multiregimpl23_regs1 = 1'd0;
reg     [2:0] multiregimpl2_regs0 = 3'd0;
reg     [2:0] multiregimpl2_regs1 = 3'd0;
reg     [2:0] multiregimpl3_regs0 = 3'd0;
reg     [2:0] multiregimpl3_regs1 = 3'd0;
reg     [2:0] multiregimpl4_regs0 = 3'd0;
reg     [2:0] multiregimpl4_regs1 = 3'd0;
reg     [2:0] multiregimpl5_regs0 = 3'd0;
reg     [2:0] multiregimpl5_regs1 = 3'd0;
reg     [2:0] multiregimpl6_regs0 = 3'd0;
reg     [2:0] multiregimpl6_regs1 = 3'd0;
reg     [2:0] multiregimpl7_regs0 = 3'd0;
reg     [2:0] multiregimpl7_regs1 = 3'd0;
reg     [2:0] multiregimpl8_regs0 = 3'd0;
reg     [2:0] multiregimpl8_regs1 = 3'd0;
reg     [2:0] multiregimpl9_regs0 = 3'd0;
reg     [2:0] multiregimpl9_regs1 = 3'd0;
wire          sel;
reg     [9:0] self0 = 10'd0;
reg     [9:0] self1 = 10'd0;
reg     [9:0] self2 = 10'd0;
reg     [9:0] self3 = 10'd0;
reg     [9:0] self4 = 10'd0;
reg     [9:0] self5 = 10'd0;
wire          sink_first;
wire          sink_last;
wire    [7:0] sink_payload_b;
wire          sink_payload_de;
wire    [7:0] sink_payload_g;
wire          sink_payload_hsync;
wire    [7:0] sink_payload_r;
wire          sink_payload_vsync;
wire          sink_ready;
wire          sink_valid;
wire          sys_clk;
wire          sys_rst;
wire    [1:0] tmdsencoder0_c;
reg  signed   [5:0] tmdsencoder0_cnt = 6'd0;
wire    [7:0] tmdsencoder0_d0;
reg     [7:0] tmdsencoder0_d1 = 8'd0;
wire          tmdsencoder0_de;
reg     [3:0] tmdsencoder0_n0q_m = 4'd0;
reg     [3:0] tmdsencoder0_n1d = 4'd0;
reg     [3:0] tmdsencoder0_n1q_m = 4'd0;
reg     [1:0] tmdsencoder0_new_c0 = 2'd0;
reg     [1:0] tmdsencoder0_new_c1 = 2'd0;
reg     [1:0] tmdsencoder0_new_c2 = 2'd0;
reg           tmdsencoder0_new_de0 = 1'd0;
reg           tmdsencoder0_new_de1 = 1'd0;
reg           tmdsencoder0_new_de2 = 1'd0;
reg     [9:0] tmdsencoder0_out = 10'd0;
wire          tmdsencoder0_q_m8_n;
reg     [8:0] tmdsencoder0_q_m_r = 9'd0;
reg     [8:0] tmdsencoder0_self = 9'd0;
wire    [1:0] tmdsencoder1_c;
reg  signed   [5:0] tmdsencoder1_cnt = 6'd0;
wire    [7:0] tmdsencoder1_d0;
reg     [7:0] tmdsencoder1_d1 = 8'd0;
wire          tmdsencoder1_de;
reg     [3:0] tmdsencoder1_n0q_m = 4'd0;
reg     [3:0] tmdsencoder1_n1d = 4'd0;
reg     [3:0] tmdsencoder1_n1q_m = 4'd0;
reg     [1:0] tmdsencoder1_new_c0 = 2'd0;
reg     [1:0] tmdsencoder1_new_c1 = 2'd0;
reg     [1:0] tmdsencoder1_new_c2 = 2'd0;
reg           tmdsencoder1_new_de0 = 1'd0;
reg           tmdsencoder1_new_de1 = 1'd0;
reg           tmdsencoder1_new_de2 = 1'd0;
reg     [9:0] tmdsencoder1_out = 10'd0;
wire          tmdsencoder1_q_m8_n;
reg     [8:0] tmdsencoder1_q_m_r = 9'd0;
reg     [8:0] tmdsencoder1_self = 9'd0;
wire    [1:0] tmdsencoder2_c;
reg  signed   [5:0] tmdsencoder2_cnt = 6'd0;
wire    [7:0] tmdsencoder2_d0;
reg     [7:0] tmdsencoder2_d1 = 8'd0;
wire          tmdsencoder2_de;
reg     [3:0] tmdsencoder2_n0q_m = 4'd0;
reg     [3:0] tmdsencoder2_n1d = 4'd0;
reg     [3:0] tmdsencoder2_n1q_m = 4'd0;
reg     [1:0] tmdsencoder2_new_c0 = 2'd0;
reg     [1:0] tmdsencoder2_new_c1 = 2'd0;
reg     [1:0] tmdsencoder2_new_c2 = 2'd0;
reg           tmdsencoder2_new_de0 = 1'd0;
reg           tmdsencoder2_new_de1 = 1'd0;
reg           tmdsencoder2_new_de2 = 1'd0;
reg     [9:0] tmdsencoder2_out = 10'd0;
wire          tmdsencoder2_q_m8_n;
reg     [8:0] tmdsencoder2_q_m_r = 9'd0;
reg     [8:0] tmdsencoder2_self = 9'd0;
wire    [1:0] tmdsencoder3_c;
reg  signed   [5:0] tmdsencoder3_cnt = 6'd0;
wire    [7:0] tmdsencoder3_d0;
reg     [7:0] tmdsencoder3_d1 = 8'd0;
wire          tmdsencoder3_de;
reg     [3:0] tmdsencoder3_n0q_m = 4'd0;
reg     [3:0] tmdsencoder3_n1d = 4'd0;
reg     [3:0] tmdsencoder3_n1q_m = 4'd0;
reg     [1:0] tmdsencoder3_new_c0 = 2'd0;
reg     [1:0] tmdsencoder3_new_c1 = 2'd0;
reg     [1:0] tmdsencoder3_new_c2 = 2'd0;
reg           tmdsencoder3_new_de0 = 1'd0;
reg           tmdsencoder3_new_de1 = 1'd0;
reg           tmdsencoder3_new_de2 = 1'd0;
reg     [9:0] tmdsencoder3_out = 10'd0;
wire          tmdsencoder3_q_m8_n;
reg     [8:0] tmdsencoder3_q_m_r = 9'd0;
reg     [8:0] tmdsencoder3_self = 9'd0;
wire    [1:0] tmdsencoder4_c;
reg  signed   [5:0] tmdsencoder4_cnt = 6'd0;
wire    [7:0] tmdsencoder4_d0;
reg     [7:0] tmdsencoder4_d1 = 8'd0;
wire          tmdsencoder4_de;
reg     [3:0] tmdsencoder4_n0q_m = 4'd0;
reg     [3:0] tmdsencoder4_n1d = 4'd0;
reg     [3:0] tmdsencoder4_n1q_m = 4'd0;
reg     [1:0] tmdsencoder4_new_c0 = 2'd0;
reg     [1:0] tmdsencoder4_new_c1 = 2'd0;
reg     [1:0] tmdsencoder4_new_c2 = 2'd0;
reg           tmdsencoder4_new_de0 = 1'd0;
reg           tmdsencoder4_new_de1 = 1'd0;
reg           tmdsencoder4_new_de2 = 1'd0;
reg     [9:0] tmdsencoder4_out = 10'd0;
wire          tmdsencoder4_q_m8_n;
reg     [8:0] tmdsencoder4_q_m_r = 9'd0;
reg     [8:0] tmdsencoder4_self = 9'd0;
wire    [1:0] tmdsencoder5_c;
reg  signed   [5:0] tmdsencoder5_cnt = 6'd0;
wire    [7:0] tmdsencoder5_d0;
reg     [7:0] tmdsencoder5_d1 = 8'd0;
wire          tmdsencoder5_de;
reg     [3:0] tmdsencoder5_n0q_m = 4'd0;
reg     [3:0] tmdsencoder5_n1d = 4'd0;
reg     [3:0] tmdsencoder5_n1q_m = 4'd0;
reg     [1:0] tmdsencoder5_new_c0 = 2'd0;
reg     [1:0] tmdsencoder5_new_c1 = 2'd0;
reg     [1:0] tmdsencoder5_new_c2 = 2'd0;
reg           tmdsencoder5_new_de0 = 1'd0;
reg           tmdsencoder5_new_de1 = 1'd0;
reg           tmdsencoder5_new_de2 = 1'd0;
reg     [9:0] tmdsencoder5_out = 10'd0;
wire          tmdsencoder5_q_m8_n;
reg     [8:0] tmdsencoder5_q_m_r = 9'd0;
reg     [8:0] tmdsencoder5_self = 9'd0;
wire   [33:0] vfb_cdc_cdc_asyncfifo_din;
wire   [33:0] vfb_cdc_cdc_asyncfifo_dout;
wire          vfb_cdc_cdc_asyncfifo_re;
wire          vfb_cdc_cdc_asyncfifo_readable;
wire          vfb_cdc_cdc_asyncfifo_we;
wire          vfb_cdc_cdc_asyncfifo_writable;
wire    [2:0] vfb_cdc_cdc_consume_wdomain;
wire          vfb_cdc_cdc_fifo_in_first;
wire          vfb_cdc_cdc_fifo_in_last;
wire   [31:0] vfb_cdc_cdc_fifo_in_payload_data;
wire          vfb_cdc_cdc_fifo_out_first;
wire          vfb_cdc_cdc_fifo_out_last;
wire   [31:0] vfb_cdc_cdc_fifo_out_payload_data;
wire          vfb_cdc_cdc_graycounter0_ce;
reg     [2:0] vfb_cdc_cdc_graycounter0_q = 3'd0;
reg     [2:0] vfb_cdc_cdc_graycounter0_q_binary = 3'd0;
wire    [2:0] vfb_cdc_cdc_graycounter0_q_next;
reg     [2:0] vfb_cdc_cdc_graycounter0_q_next_binary = 3'd0;
wire          vfb_cdc_cdc_graycounter1_ce;
reg     [2:0] vfb_cdc_cdc_graycounter1_q = 3'd0;
reg     [2:0] vfb_cdc_cdc_graycounter1_q_binary = 3'd0;
wire    [2:0] vfb_cdc_cdc_graycounter1_q_next;
reg     [2:0] vfb_cdc_cdc_graycounter1_q_next_binary = 3'd0;
wire    [2:0] vfb_cdc_cdc_produce_rdomain;
wire    [1:0] vfb_cdc_cdc_rdport_adr;
wire   [33:0] vfb_cdc_cdc_rdport_dat_r;
wire          vfb_cdc_cdc_sink_first;
wire          vfb_cdc_cdc_sink_last;
wire   [31:0] vfb_cdc_cdc_sink_payload_data;
wire          vfb_cdc_cdc_sink_ready;
wire          vfb_cdc_cdc_sink_valid;
wire          vfb_cdc_cdc_source_first;
wire          vfb_cdc_cdc_source_last;
wire   [31:0] vfb_cdc_cdc_source_payload_data;
wire          vfb_cdc_cdc_source_ready;
wire          vfb_cdc_cdc_source_valid;
wire    [1:0] vfb_cdc_cdc_wrport_adr;
wire   [33:0] vfb_cdc_cdc_wrport_dat_r;
wire   [33:0] vfb_cdc_cdc_wrport_dat_w;
wire          vfb_cdc_cdc_wrport_we;
wire          vfb_cdc_sink_sink_first;
wire          vfb_cdc_sink_sink_last;
wire   [31:0] vfb_cdc_sink_sink_payload_data;
wire          vfb_cdc_sink_sink_ready;
wire          vfb_cdc_sink_sink_valid;
wire          vfb_cdc_source_source_first;
wire          vfb_cdc_source_source_last;
wire   [31:0] vfb_cdc_source_source_payload_data;
reg           vfb_cdc_source_source_ready = 1'd0;
wire          vfb_cdc_source_source_valid;
wire          vfb_conv_converter_sink_first;
wire          vfb_conv_converter_sink_last;
wire   [31:0] vfb_conv_converter_sink_payload_data;
wire          vfb_conv_converter_sink_ready;
wire          vfb_conv_converter_sink_valid;
wire          vfb_conv_converter_source_first;
wire          vfb_conv_converter_source_last;
wire   [31:0] vfb_conv_converter_source_payload_data;
wire          vfb_conv_converter_source_payload_valid_token_count;
wire          vfb_conv_converter_source_ready;
wire          vfb_conv_converter_source_valid;
wire          vfb_conv_source_source_first;
wire          vfb_conv_source_source_last;
wire   [31:0] vfb_conv_source_source_payload_data;
wire          vfb_conv_source_source_ready;
wire          vfb_conv_source_source_valid;
wire          vfb_dma_reset;
wire          vfb_dma_source_first;
wire          vfb_dma_source_last;
wire   [31:0] vfb_dma_source_payload_data;
wire          vfb_dma_source_ready;
wire          vfb_dma_source_valid;
reg           vfb_first = 1'd0;
reg           vfb_first_videoframebuffer_next_value = 1'd0;
reg           vfb_first_videoframebuffer_next_value_ce = 1'd0;
wire          vfb_reset;
reg           vfb_source_first = 1'd0;
reg           vfb_source_last = 1'd0;
wire    [7:0] vfb_source_payload_b;
reg           vfb_source_payload_de = 1'd0;
wire    [7:0] vfb_source_payload_g;
reg           vfb_source_payload_hsync = 1'd0;
wire    [7:0] vfb_source_payload_r;
reg           vfb_source_payload_vsync = 1'd0;
wire          vfb_source_ready;
reg           vfb_source_valid = 1'd0;
wire          vfb_underflow;
wire          vfb_vtg_sink_first;
wire          vfb_vtg_sink_last;
wire          vfb_vtg_sink_payload_de;
wire   [11:0] vfb_vtg_sink_payload_hcount;
wire   [11:0] vfb_vtg_sink_payload_hres;
wire          vfb_vtg_sink_payload_hsync;
wire   [11:0] vfb_vtg_sink_payload_vcount;
wire   [11:0] vfb_vtg_sink_payload_vres;
wire          vfb_vtg_sink_payload_vsync;
reg           vfb_vtg_sink_ready = 1'd0;
wire          vfb_vtg_sink_valid;
reg           videoframebuffer_next_state = 1'd0;
reg           videoframebuffer_state = 1'd0;
wire   [11:0] videohdmi10to1serializer0_cdc_asyncfifo0_din;
wire   [11:0] videohdmi10to1serializer0_cdc_asyncfifo0_dout;
wire          videohdmi10to1serializer0_cdc_asyncfifo0_re;
wire          videohdmi10to1serializer0_cdc_asyncfifo0_readable;
wire          videohdmi10to1serializer0_cdc_asyncfifo0_we;
wire          videohdmi10to1serializer0_cdc_asyncfifo0_writable;
wire    [2:0] videohdmi10to1serializer0_cdc_consume_wdomain;
wire          videohdmi10to1serializer0_cdc_fifo_in_first;
wire          videohdmi10to1serializer0_cdc_fifo_in_last;
wire    [9:0] videohdmi10to1serializer0_cdc_fifo_in_payload_data;
wire          videohdmi10to1serializer0_cdc_fifo_out_first;
wire          videohdmi10to1serializer0_cdc_fifo_out_last;
wire    [9:0] videohdmi10to1serializer0_cdc_fifo_out_payload_data;
wire          videohdmi10to1serializer0_cdc_graycounter0_ce;
reg     [2:0] videohdmi10to1serializer0_cdc_graycounter0_q = 3'd0;
reg     [2:0] videohdmi10to1serializer0_cdc_graycounter0_q_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer0_cdc_graycounter0_q_next;
reg     [2:0] videohdmi10to1serializer0_cdc_graycounter0_q_next_binary = 3'd0;
wire          videohdmi10to1serializer0_cdc_graycounter1_ce;
reg     [2:0] videohdmi10to1serializer0_cdc_graycounter1_q = 3'd0;
reg     [2:0] videohdmi10to1serializer0_cdc_graycounter1_q_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer0_cdc_graycounter1_q_next;
reg     [2:0] videohdmi10to1serializer0_cdc_graycounter1_q_next_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer0_cdc_produce_rdomain;
wire    [1:0] videohdmi10to1serializer0_cdc_rdport_adr;
wire   [11:0] videohdmi10to1serializer0_cdc_rdport_dat_r;
wire          videohdmi10to1serializer0_cdc_sink_first;
wire          videohdmi10to1serializer0_cdc_sink_last;
wire    [9:0] videohdmi10to1serializer0_cdc_sink_payload_data;
wire          videohdmi10to1serializer0_cdc_sink_ready;
wire          videohdmi10to1serializer0_cdc_sink_valid;
wire          videohdmi10to1serializer0_cdc_source_first;
wire          videohdmi10to1serializer0_cdc_source_last;
wire    [9:0] videohdmi10to1serializer0_cdc_source_payload_data;
wire          videohdmi10to1serializer0_cdc_source_ready;
wire          videohdmi10to1serializer0_cdc_source_valid;
wire    [1:0] videohdmi10to1serializer0_cdc_wrport_adr;
wire   [11:0] videohdmi10to1serializer0_cdc_wrport_dat_r;
wire   [11:0] videohdmi10to1serializer0_cdc_wrport_dat_w;
wire          videohdmi10to1serializer0_cdc_wrport_we;
reg           videohdmi10to1serializer0_i_count = 1'd0;
wire    [9:0] videohdmi10to1serializer0_i_data;
wire          videohdmi10to1serializer0_i_inc;
reg     [4:0] videohdmi10to1serializer0_level = 5'd0;
reg     [3:0] videohdmi10to1serializer0_o_count = 4'd0;
reg     [1:0] videohdmi10to1serializer0_o_data = 2'd0;
wire          videohdmi10to1serializer0_o_inc;
reg    [19:0] videohdmi10to1serializer0_shift_register = 20'd0;
wire          videohdmi10to1serializer0_sink_first;
wire          videohdmi10to1serializer0_sink_last;
wire    [9:0] videohdmi10to1serializer0_sink_payload_data;
wire          videohdmi10to1serializer0_sink_ready;
reg           videohdmi10to1serializer0_sink_sink_first = 1'd0;
reg           videohdmi10to1serializer0_sink_sink_last = 1'd0;
wire    [9:0] videohdmi10to1serializer0_sink_sink_payload_data;
wire          videohdmi10to1serializer0_sink_sink_ready;
wire          videohdmi10to1serializer0_sink_sink_valid;
wire          videohdmi10to1serializer0_sink_valid;
wire    [1:0] videohdmi10to1serializer0_source_payload_data;
wire          videohdmi10to1serializer0_source_ready;
wire          videohdmi10to1serializer0_source_source_first;
wire          videohdmi10to1serializer0_source_source_last;
wire    [9:0] videohdmi10to1serializer0_source_source_payload_data;
wire          videohdmi10to1serializer0_source_source_ready;
wire          videohdmi10to1serializer0_source_source_valid;
wire          videohdmi10to1serializer0_source_valid;
wire   [11:0] videohdmi10to1serializer1_cdc_asyncfifo1_din;
wire   [11:0] videohdmi10to1serializer1_cdc_asyncfifo1_dout;
wire          videohdmi10to1serializer1_cdc_asyncfifo1_re;
wire          videohdmi10to1serializer1_cdc_asyncfifo1_readable;
wire          videohdmi10to1serializer1_cdc_asyncfifo1_we;
wire          videohdmi10to1serializer1_cdc_asyncfifo1_writable;
wire    [2:0] videohdmi10to1serializer1_cdc_consume_wdomain;
wire          videohdmi10to1serializer1_cdc_fifo_in_first;
wire          videohdmi10to1serializer1_cdc_fifo_in_last;
wire    [9:0] videohdmi10to1serializer1_cdc_fifo_in_payload_data;
wire          videohdmi10to1serializer1_cdc_fifo_out_first;
wire          videohdmi10to1serializer1_cdc_fifo_out_last;
wire    [9:0] videohdmi10to1serializer1_cdc_fifo_out_payload_data;
wire          videohdmi10to1serializer1_cdc_graycounter2_ce;
reg     [2:0] videohdmi10to1serializer1_cdc_graycounter2_q = 3'd0;
reg     [2:0] videohdmi10to1serializer1_cdc_graycounter2_q_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer1_cdc_graycounter2_q_next;
reg     [2:0] videohdmi10to1serializer1_cdc_graycounter2_q_next_binary = 3'd0;
wire          videohdmi10to1serializer1_cdc_graycounter3_ce;
reg     [2:0] videohdmi10to1serializer1_cdc_graycounter3_q = 3'd0;
reg     [2:0] videohdmi10to1serializer1_cdc_graycounter3_q_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer1_cdc_graycounter3_q_next;
reg     [2:0] videohdmi10to1serializer1_cdc_graycounter3_q_next_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer1_cdc_produce_rdomain;
wire    [1:0] videohdmi10to1serializer1_cdc_rdport_adr;
wire   [11:0] videohdmi10to1serializer1_cdc_rdport_dat_r;
wire          videohdmi10to1serializer1_cdc_sink_first;
wire          videohdmi10to1serializer1_cdc_sink_last;
wire    [9:0] videohdmi10to1serializer1_cdc_sink_payload_data;
wire          videohdmi10to1serializer1_cdc_sink_ready;
wire          videohdmi10to1serializer1_cdc_sink_valid;
wire          videohdmi10to1serializer1_cdc_source_first;
wire          videohdmi10to1serializer1_cdc_source_last;
wire    [9:0] videohdmi10to1serializer1_cdc_source_payload_data;
wire          videohdmi10to1serializer1_cdc_source_ready;
wire          videohdmi10to1serializer1_cdc_source_valid;
wire    [1:0] videohdmi10to1serializer1_cdc_wrport_adr;
wire   [11:0] videohdmi10to1serializer1_cdc_wrport_dat_r;
wire   [11:0] videohdmi10to1serializer1_cdc_wrport_dat_w;
wire          videohdmi10to1serializer1_cdc_wrport_we;
reg           videohdmi10to1serializer1_i_count = 1'd0;
wire    [9:0] videohdmi10to1serializer1_i_data;
wire          videohdmi10to1serializer1_i_inc;
reg     [4:0] videohdmi10to1serializer1_level = 5'd0;
reg     [3:0] videohdmi10to1serializer1_o_count = 4'd0;
reg     [1:0] videohdmi10to1serializer1_o_data = 2'd0;
wire          videohdmi10to1serializer1_o_inc;
reg    [19:0] videohdmi10to1serializer1_shift_register = 20'd0;
wire          videohdmi10to1serializer1_sink_first;
wire          videohdmi10to1serializer1_sink_last;
wire    [9:0] videohdmi10to1serializer1_sink_payload_data;
wire          videohdmi10to1serializer1_sink_ready;
reg           videohdmi10to1serializer1_sink_sink_first = 1'd0;
reg           videohdmi10to1serializer1_sink_sink_last = 1'd0;
wire    [9:0] videohdmi10to1serializer1_sink_sink_payload_data;
wire          videohdmi10to1serializer1_sink_sink_ready;
wire          videohdmi10to1serializer1_sink_sink_valid;
wire          videohdmi10to1serializer1_sink_valid;
wire    [1:0] videohdmi10to1serializer1_source_payload_data;
wire          videohdmi10to1serializer1_source_ready;
wire          videohdmi10to1serializer1_source_source_first;
wire          videohdmi10to1serializer1_source_source_last;
wire    [9:0] videohdmi10to1serializer1_source_source_payload_data;
wire          videohdmi10to1serializer1_source_source_ready;
wire          videohdmi10to1serializer1_source_source_valid;
wire          videohdmi10to1serializer1_source_valid;
wire   [11:0] videohdmi10to1serializer2_cdc_asyncfifo2_din;
wire   [11:0] videohdmi10to1serializer2_cdc_asyncfifo2_dout;
wire          videohdmi10to1serializer2_cdc_asyncfifo2_re;
wire          videohdmi10to1serializer2_cdc_asyncfifo2_readable;
wire          videohdmi10to1serializer2_cdc_asyncfifo2_we;
wire          videohdmi10to1serializer2_cdc_asyncfifo2_writable;
wire    [2:0] videohdmi10to1serializer2_cdc_consume_wdomain;
wire          videohdmi10to1serializer2_cdc_fifo_in_first;
wire          videohdmi10to1serializer2_cdc_fifo_in_last;
wire    [9:0] videohdmi10to1serializer2_cdc_fifo_in_payload_data;
wire          videohdmi10to1serializer2_cdc_fifo_out_first;
wire          videohdmi10to1serializer2_cdc_fifo_out_last;
wire    [9:0] videohdmi10to1serializer2_cdc_fifo_out_payload_data;
wire          videohdmi10to1serializer2_cdc_graycounter4_ce;
reg     [2:0] videohdmi10to1serializer2_cdc_graycounter4_q = 3'd0;
reg     [2:0] videohdmi10to1serializer2_cdc_graycounter4_q_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer2_cdc_graycounter4_q_next;
reg     [2:0] videohdmi10to1serializer2_cdc_graycounter4_q_next_binary = 3'd0;
wire          videohdmi10to1serializer2_cdc_graycounter5_ce;
reg     [2:0] videohdmi10to1serializer2_cdc_graycounter5_q = 3'd0;
reg     [2:0] videohdmi10to1serializer2_cdc_graycounter5_q_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer2_cdc_graycounter5_q_next;
reg     [2:0] videohdmi10to1serializer2_cdc_graycounter5_q_next_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer2_cdc_produce_rdomain;
wire    [1:0] videohdmi10to1serializer2_cdc_rdport_adr;
wire   [11:0] videohdmi10to1serializer2_cdc_rdport_dat_r;
wire          videohdmi10to1serializer2_cdc_sink_first;
wire          videohdmi10to1serializer2_cdc_sink_last;
wire    [9:0] videohdmi10to1serializer2_cdc_sink_payload_data;
wire          videohdmi10to1serializer2_cdc_sink_ready;
wire          videohdmi10to1serializer2_cdc_sink_valid;
wire          videohdmi10to1serializer2_cdc_source_first;
wire          videohdmi10to1serializer2_cdc_source_last;
wire    [9:0] videohdmi10to1serializer2_cdc_source_payload_data;
wire          videohdmi10to1serializer2_cdc_source_ready;
wire          videohdmi10to1serializer2_cdc_source_valid;
wire    [1:0] videohdmi10to1serializer2_cdc_wrport_adr;
wire   [11:0] videohdmi10to1serializer2_cdc_wrport_dat_r;
wire   [11:0] videohdmi10to1serializer2_cdc_wrport_dat_w;
wire          videohdmi10to1serializer2_cdc_wrport_we;
reg           videohdmi10to1serializer2_i_count = 1'd0;
wire    [9:0] videohdmi10to1serializer2_i_data;
wire          videohdmi10to1serializer2_i_inc;
reg     [4:0] videohdmi10to1serializer2_level = 5'd0;
reg     [3:0] videohdmi10to1serializer2_o_count = 4'd0;
reg     [1:0] videohdmi10to1serializer2_o_data = 2'd0;
wire          videohdmi10to1serializer2_o_inc;
reg    [19:0] videohdmi10to1serializer2_shift_register = 20'd0;
wire          videohdmi10to1serializer2_sink_first;
wire          videohdmi10to1serializer2_sink_last;
wire    [9:0] videohdmi10to1serializer2_sink_payload_data;
wire          videohdmi10to1serializer2_sink_ready;
reg           videohdmi10to1serializer2_sink_sink_first = 1'd0;
reg           videohdmi10to1serializer2_sink_sink_last = 1'd0;
wire    [9:0] videohdmi10to1serializer2_sink_sink_payload_data;
wire          videohdmi10to1serializer2_sink_sink_ready;
wire          videohdmi10to1serializer2_sink_sink_valid;
wire          videohdmi10to1serializer2_sink_valid;
wire    [1:0] videohdmi10to1serializer2_source_payload_data;
wire          videohdmi10to1serializer2_source_ready;
wire          videohdmi10to1serializer2_source_source_first;
wire          videohdmi10to1serializer2_source_source_last;
wire    [9:0] videohdmi10to1serializer2_source_source_payload_data;
wire          videohdmi10to1serializer2_source_source_ready;
wire          videohdmi10to1serializer2_source_source_valid;
wire          videohdmi10to1serializer2_source_valid;
wire   [11:0] videohdmi10to1serializer3_cdc_asyncfifo3_din;
wire   [11:0] videohdmi10to1serializer3_cdc_asyncfifo3_dout;
wire          videohdmi10to1serializer3_cdc_asyncfifo3_re;
wire          videohdmi10to1serializer3_cdc_asyncfifo3_readable;
wire          videohdmi10to1serializer3_cdc_asyncfifo3_we;
wire          videohdmi10to1serializer3_cdc_asyncfifo3_writable;
wire    [2:0] videohdmi10to1serializer3_cdc_consume_wdomain;
wire          videohdmi10to1serializer3_cdc_fifo_in_first;
wire          videohdmi10to1serializer3_cdc_fifo_in_last;
wire    [9:0] videohdmi10to1serializer3_cdc_fifo_in_payload_data;
wire          videohdmi10to1serializer3_cdc_fifo_out_first;
wire          videohdmi10to1serializer3_cdc_fifo_out_last;
wire    [9:0] videohdmi10to1serializer3_cdc_fifo_out_payload_data;
wire          videohdmi10to1serializer3_cdc_graycounter6_ce;
reg     [2:0] videohdmi10to1serializer3_cdc_graycounter6_q = 3'd0;
reg     [2:0] videohdmi10to1serializer3_cdc_graycounter6_q_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer3_cdc_graycounter6_q_next;
reg     [2:0] videohdmi10to1serializer3_cdc_graycounter6_q_next_binary = 3'd0;
wire          videohdmi10to1serializer3_cdc_graycounter7_ce;
reg     [2:0] videohdmi10to1serializer3_cdc_graycounter7_q = 3'd0;
reg     [2:0] videohdmi10to1serializer3_cdc_graycounter7_q_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer3_cdc_graycounter7_q_next;
reg     [2:0] videohdmi10to1serializer3_cdc_graycounter7_q_next_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer3_cdc_produce_rdomain;
wire    [1:0] videohdmi10to1serializer3_cdc_rdport_adr;
wire   [11:0] videohdmi10to1serializer3_cdc_rdport_dat_r;
wire          videohdmi10to1serializer3_cdc_sink_first;
wire          videohdmi10to1serializer3_cdc_sink_last;
wire    [9:0] videohdmi10to1serializer3_cdc_sink_payload_data;
wire          videohdmi10to1serializer3_cdc_sink_ready;
wire          videohdmi10to1serializer3_cdc_sink_valid;
wire          videohdmi10to1serializer3_cdc_source_first;
wire          videohdmi10to1serializer3_cdc_source_last;
wire    [9:0] videohdmi10to1serializer3_cdc_source_payload_data;
wire          videohdmi10to1serializer3_cdc_source_ready;
wire          videohdmi10to1serializer3_cdc_source_valid;
wire    [1:0] videohdmi10to1serializer3_cdc_wrport_adr;
wire   [11:0] videohdmi10to1serializer3_cdc_wrport_dat_r;
wire   [11:0] videohdmi10to1serializer3_cdc_wrport_dat_w;
wire          videohdmi10to1serializer3_cdc_wrport_we;
reg           videohdmi10to1serializer3_i_count = 1'd0;
wire    [9:0] videohdmi10to1serializer3_i_data;
wire          videohdmi10to1serializer3_i_inc;
reg     [4:0] videohdmi10to1serializer3_level = 5'd0;
reg     [3:0] videohdmi10to1serializer3_o_count = 4'd0;
reg     [1:0] videohdmi10to1serializer3_o_data = 2'd0;
wire          videohdmi10to1serializer3_o_inc;
reg    [19:0] videohdmi10to1serializer3_shift_register = 20'd0;
wire          videohdmi10to1serializer3_sink_first;
wire          videohdmi10to1serializer3_sink_last;
wire    [9:0] videohdmi10to1serializer3_sink_payload_data;
wire          videohdmi10to1serializer3_sink_ready;
reg           videohdmi10to1serializer3_sink_sink_first = 1'd0;
reg           videohdmi10to1serializer3_sink_sink_last = 1'd0;
wire    [9:0] videohdmi10to1serializer3_sink_sink_payload_data;
wire          videohdmi10to1serializer3_sink_sink_ready;
wire          videohdmi10to1serializer3_sink_sink_valid;
wire          videohdmi10to1serializer3_sink_valid;
wire    [1:0] videohdmi10to1serializer3_source_payload_data;
wire          videohdmi10to1serializer3_source_ready;
wire          videohdmi10to1serializer3_source_source_first;
wire          videohdmi10to1serializer3_source_source_last;
wire    [9:0] videohdmi10to1serializer3_source_source_payload_data;
wire          videohdmi10to1serializer3_source_source_ready;
wire          videohdmi10to1serializer3_source_source_valid;
wire          videohdmi10to1serializer3_source_valid;
wire   [11:0] videohdmi10to1serializer4_cdc_asyncfifo4_din;
wire   [11:0] videohdmi10to1serializer4_cdc_asyncfifo4_dout;
wire          videohdmi10to1serializer4_cdc_asyncfifo4_re;
wire          videohdmi10to1serializer4_cdc_asyncfifo4_readable;
wire          videohdmi10to1serializer4_cdc_asyncfifo4_we;
wire          videohdmi10to1serializer4_cdc_asyncfifo4_writable;
wire    [2:0] videohdmi10to1serializer4_cdc_consume_wdomain;
wire          videohdmi10to1serializer4_cdc_fifo_in_first;
wire          videohdmi10to1serializer4_cdc_fifo_in_last;
wire    [9:0] videohdmi10to1serializer4_cdc_fifo_in_payload_data;
wire          videohdmi10to1serializer4_cdc_fifo_out_first;
wire          videohdmi10to1serializer4_cdc_fifo_out_last;
wire    [9:0] videohdmi10to1serializer4_cdc_fifo_out_payload_data;
wire          videohdmi10to1serializer4_cdc_graycounter8_ce;
reg     [2:0] videohdmi10to1serializer4_cdc_graycounter8_q = 3'd0;
reg     [2:0] videohdmi10to1serializer4_cdc_graycounter8_q_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer4_cdc_graycounter8_q_next;
reg     [2:0] videohdmi10to1serializer4_cdc_graycounter8_q_next_binary = 3'd0;
wire          videohdmi10to1serializer4_cdc_graycounter9_ce;
reg     [2:0] videohdmi10to1serializer4_cdc_graycounter9_q = 3'd0;
reg     [2:0] videohdmi10to1serializer4_cdc_graycounter9_q_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer4_cdc_graycounter9_q_next;
reg     [2:0] videohdmi10to1serializer4_cdc_graycounter9_q_next_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer4_cdc_produce_rdomain;
wire    [1:0] videohdmi10to1serializer4_cdc_rdport_adr;
wire   [11:0] videohdmi10to1serializer4_cdc_rdport_dat_r;
wire          videohdmi10to1serializer4_cdc_sink_first;
wire          videohdmi10to1serializer4_cdc_sink_last;
wire    [9:0] videohdmi10to1serializer4_cdc_sink_payload_data;
wire          videohdmi10to1serializer4_cdc_sink_ready;
wire          videohdmi10to1serializer4_cdc_sink_valid;
wire          videohdmi10to1serializer4_cdc_source_first;
wire          videohdmi10to1serializer4_cdc_source_last;
wire    [9:0] videohdmi10to1serializer4_cdc_source_payload_data;
wire          videohdmi10to1serializer4_cdc_source_ready;
wire          videohdmi10to1serializer4_cdc_source_valid;
wire    [1:0] videohdmi10to1serializer4_cdc_wrport_adr;
wire   [11:0] videohdmi10to1serializer4_cdc_wrport_dat_r;
wire   [11:0] videohdmi10to1serializer4_cdc_wrport_dat_w;
wire          videohdmi10to1serializer4_cdc_wrport_we;
reg           videohdmi10to1serializer4_i_count = 1'd0;
wire    [9:0] videohdmi10to1serializer4_i_data;
wire          videohdmi10to1serializer4_i_inc;
reg     [4:0] videohdmi10to1serializer4_level = 5'd0;
reg     [3:0] videohdmi10to1serializer4_o_count = 4'd0;
reg     [1:0] videohdmi10to1serializer4_o_data = 2'd0;
wire          videohdmi10to1serializer4_o_inc;
reg    [19:0] videohdmi10to1serializer4_shift_register = 20'd0;
wire          videohdmi10to1serializer4_sink_first;
wire          videohdmi10to1serializer4_sink_last;
wire    [9:0] videohdmi10to1serializer4_sink_payload_data;
wire          videohdmi10to1serializer4_sink_ready;
reg           videohdmi10to1serializer4_sink_sink_first = 1'd0;
reg           videohdmi10to1serializer4_sink_sink_last = 1'd0;
wire    [9:0] videohdmi10to1serializer4_sink_sink_payload_data;
wire          videohdmi10to1serializer4_sink_sink_ready;
wire          videohdmi10to1serializer4_sink_sink_valid;
wire          videohdmi10to1serializer4_sink_valid;
wire    [1:0] videohdmi10to1serializer4_source_payload_data;
wire          videohdmi10to1serializer4_source_ready;
wire          videohdmi10to1serializer4_source_source_first;
wire          videohdmi10to1serializer4_source_source_last;
wire    [9:0] videohdmi10to1serializer4_source_source_payload_data;
wire          videohdmi10to1serializer4_source_source_ready;
wire          videohdmi10to1serializer4_source_source_valid;
wire          videohdmi10to1serializer4_source_valid;
wire   [11:0] videohdmi10to1serializer5_cdc_asyncfifo5_din;
wire   [11:0] videohdmi10to1serializer5_cdc_asyncfifo5_dout;
wire          videohdmi10to1serializer5_cdc_asyncfifo5_re;
wire          videohdmi10to1serializer5_cdc_asyncfifo5_readable;
wire          videohdmi10to1serializer5_cdc_asyncfifo5_we;
wire          videohdmi10to1serializer5_cdc_asyncfifo5_writable;
wire    [2:0] videohdmi10to1serializer5_cdc_consume_wdomain;
wire          videohdmi10to1serializer5_cdc_fifo_in_first;
wire          videohdmi10to1serializer5_cdc_fifo_in_last;
wire    [9:0] videohdmi10to1serializer5_cdc_fifo_in_payload_data;
wire          videohdmi10to1serializer5_cdc_fifo_out_first;
wire          videohdmi10to1serializer5_cdc_fifo_out_last;
wire    [9:0] videohdmi10to1serializer5_cdc_fifo_out_payload_data;
wire          videohdmi10to1serializer5_cdc_graycounter10_ce;
reg     [2:0] videohdmi10to1serializer5_cdc_graycounter10_q = 3'd0;
reg     [2:0] videohdmi10to1serializer5_cdc_graycounter10_q_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer5_cdc_graycounter10_q_next;
reg     [2:0] videohdmi10to1serializer5_cdc_graycounter10_q_next_binary = 3'd0;
wire          videohdmi10to1serializer5_cdc_graycounter11_ce;
reg     [2:0] videohdmi10to1serializer5_cdc_graycounter11_q = 3'd0;
reg     [2:0] videohdmi10to1serializer5_cdc_graycounter11_q_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer5_cdc_graycounter11_q_next;
reg     [2:0] videohdmi10to1serializer5_cdc_graycounter11_q_next_binary = 3'd0;
wire    [2:0] videohdmi10to1serializer5_cdc_produce_rdomain;
wire    [1:0] videohdmi10to1serializer5_cdc_rdport_adr;
wire   [11:0] videohdmi10to1serializer5_cdc_rdport_dat_r;
wire          videohdmi10to1serializer5_cdc_sink_first;
wire          videohdmi10to1serializer5_cdc_sink_last;
wire    [9:0] videohdmi10to1serializer5_cdc_sink_payload_data;
wire          videohdmi10to1serializer5_cdc_sink_ready;
wire          videohdmi10to1serializer5_cdc_sink_valid;
wire          videohdmi10to1serializer5_cdc_source_first;
wire          videohdmi10to1serializer5_cdc_source_last;
wire    [9:0] videohdmi10to1serializer5_cdc_source_payload_data;
wire          videohdmi10to1serializer5_cdc_source_ready;
wire          videohdmi10to1serializer5_cdc_source_valid;
wire    [1:0] videohdmi10to1serializer5_cdc_wrport_adr;
wire   [11:0] videohdmi10to1serializer5_cdc_wrport_dat_r;
wire   [11:0] videohdmi10to1serializer5_cdc_wrport_dat_w;
wire          videohdmi10to1serializer5_cdc_wrport_we;
reg           videohdmi10to1serializer5_i_count = 1'd0;
wire    [9:0] videohdmi10to1serializer5_i_data;
wire          videohdmi10to1serializer5_i_inc;
reg     [4:0] videohdmi10to1serializer5_level = 5'd0;
reg     [3:0] videohdmi10to1serializer5_o_count = 4'd0;
reg     [1:0] videohdmi10to1serializer5_o_data = 2'd0;
wire          videohdmi10to1serializer5_o_inc;
reg    [19:0] videohdmi10to1serializer5_shift_register = 20'd0;
wire          videohdmi10to1serializer5_sink_first;
wire          videohdmi10to1serializer5_sink_last;
wire    [9:0] videohdmi10to1serializer5_sink_payload_data;
wire          videohdmi10to1serializer5_sink_ready;
reg           videohdmi10to1serializer5_sink_sink_first = 1'd0;
reg           videohdmi10to1serializer5_sink_sink_last = 1'd0;
wire    [9:0] videohdmi10to1serializer5_sink_sink_payload_data;
wire          videohdmi10to1serializer5_sink_sink_ready;
wire          videohdmi10to1serializer5_sink_sink_valid;
wire          videohdmi10to1serializer5_sink_valid;
wire    [1:0] videohdmi10to1serializer5_source_payload_data;
wire          videohdmi10to1serializer5_source_ready;
wire          videohdmi10to1serializer5_source_source_first;
wire          videohdmi10to1serializer5_source_source_last;
wire    [9:0] videohdmi10to1serializer5_source_source_payload_data;
wire          videohdmi10to1serializer5_source_source_ready;
wire          videohdmi10to1serializer5_source_source_valid;
wire          videohdmi10to1serializer5_source_valid;
wire   [11:0] vres0_r;
reg           vres0_re = 1'd0;
wire   [11:0] vres0_w;
reg           vres0_we = 1'd0;
wire   [11:0] vscan0_r;
reg           vscan0_re = 1'd0;
wire   [11:0] vscan0_w;
reg           vscan0_we = 1'd0;
wire   [11:0] vsync_end0_r;
reg           vsync_end0_re = 1'd0;
wire   [11:0] vsync_end0_w;
reg           vsync_end0_we = 1'd0;
wire   [11:0] vsync_start0_r;
reg           vsync_start0_re = 1'd0;
wire   [11:0] vsync_start0_w;
reg           vsync_start0_we = 1'd0;
wire          vtg_enable;
reg           vtg_enable_re = 1'd0;
reg           vtg_enable_storage = 1'd1;
reg           vtg_hactive = 1'd0;
reg           vtg_hactive_clockdomainsrenamer_next_value0 = 1'd0;
reg           vtg_hactive_clockdomainsrenamer_next_value_ce0 = 1'd0;
wire   [11:0] vtg_hres;
reg           vtg_hres_re = 1'd0;
reg    [11:0] vtg_hres_storage = 12'd720;
wire   [11:0] vtg_hscan;
reg           vtg_hscan_re = 1'd0;
reg    [11:0] vtg_hscan_storage = 12'd819;
wire   [11:0] vtg_hsync_end;
reg           vtg_hsync_end_re = 1'd0;
reg    [11:0] vtg_hsync_end_storage = 12'd780;
wire   [11:0] vtg_hsync_start;
reg           vtg_hsync_start_re = 1'd0;
reg    [11:0] vtg_hsync_start_storage = 12'd760;
wire          vtg_reset;
reg           vtg_source_first = 1'd0;
reg           vtg_source_last = 1'd0;
wire          vtg_source_payload_de;
reg    [11:0] vtg_source_payload_hcount = 12'd0;
reg    [11:0] vtg_source_payload_hcount_clockdomainsrenamer_next_value4 = 12'd0;
reg           vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 = 1'd0;
reg    [11:0] vtg_source_payload_hres = 12'd0;
reg    [11:0] vtg_source_payload_hres_clockdomainsrenamer_next_value2 = 12'd0;
reg           vtg_source_payload_hres_clockdomainsrenamer_next_value_ce2 = 1'd0;
reg           vtg_source_payload_hsync = 1'd0;
reg           vtg_source_payload_hsync_clockdomainsrenamer_next_value6 = 1'd0;
reg           vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6 = 1'd0;
reg    [11:0] vtg_source_payload_vcount = 12'd0;
reg    [11:0] vtg_source_payload_vcount_clockdomainsrenamer_next_value5 = 12'd0;
reg           vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 = 1'd0;
reg    [11:0] vtg_source_payload_vres = 12'd0;
reg    [11:0] vtg_source_payload_vres_clockdomainsrenamer_next_value3 = 12'd0;
reg           vtg_source_payload_vres_clockdomainsrenamer_next_value_ce3 = 1'd0;
reg           vtg_source_payload_vsync = 1'd0;
reg           vtg_source_payload_vsync_clockdomainsrenamer_next_value7 = 1'd0;
reg           vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7 = 1'd0;
wire          vtg_source_ready;
reg           vtg_source_valid = 1'd0;
reg           vtg_vactive = 1'd0;
reg           vtg_vactive_clockdomainsrenamer_next_value1 = 1'd0;
reg           vtg_vactive_clockdomainsrenamer_next_value_ce1 = 1'd0;
wire   [11:0] vtg_vres;
reg           vtg_vres_re = 1'd0;
reg    [11:0] vtg_vres_storage = 12'd720;
wire   [11:0] vtg_vscan;
reg           vtg_vscan_re = 1'd0;
reg    [11:0] vtg_vscan_storage = 12'd759;
wire   [11:0] vtg_vsync_end;
reg           vtg_vsync_end_re = 1'd0;
reg    [11:0] vtg_vsync_end_storage = 12'd748;
wire   [11:0] vtg_vsync_start;
reg           vtg_vsync_start_re = 1'd0;
reg    [11:0] vtg_vsync_start_storage = 12'd744;
wire          we;
reg           wishbone2csr_next_state = 1'd0;
reg           wishbone2csr_state = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign sys_clk = clk_sys;
assign hdmi_clk = clk_hdmi;
assign hdmi5x_clk = clk_hdmi5x;
assign sys_rst = rst_sys;
assign hdmi_rst = rst_hdmi;
assign hdmi5x_rst = rst_hdmi5x;
assign vfb_vtg_sink_valid = vtg_source_valid;
assign vtg_source_ready = vfb_vtg_sink_ready;
assign vfb_vtg_sink_first = vtg_source_first;
assign vfb_vtg_sink_last = vtg_source_last;
assign vfb_vtg_sink_payload_hsync = vtg_source_payload_hsync;
assign vfb_vtg_sink_payload_vsync = vtg_source_payload_vsync;
assign vfb_vtg_sink_payload_de = vtg_source_payload_de;
assign vfb_vtg_sink_payload_hres = vtg_source_payload_hres;
assign vfb_vtg_sink_payload_vres = vtg_source_payload_vres;
assign vfb_vtg_sink_payload_hcount = vtg_source_payload_hcount;
assign vfb_vtg_sink_payload_vcount = vtg_source_payload_vcount;
assign sink_valid = vfb_source_valid;
assign vfb_source_ready = sink_ready;
assign sink_first = vfb_source_first;
assign sink_last = vfb_source_last;
assign sink_payload_hsync = vfb_source_payload_hsync;
assign sink_payload_vsync = vfb_source_payload_vsync;
assign sink_payload_de = vfb_source_payload_de;
assign sink_payload_r = vfb_source_payload_r;
assign sink_payload_g = vfb_source_payload_g;
assign sink_payload_b = vfb_source_payload_b;
assign vfb_dma_reset = dma_stream_reset;
assign vfb_dma_source_valid = dma_stream_valid;
assign vfb_dma_source_payload_data = dma_stream_data;
assign vfb_dma_source_first = dma_stream_first;
assign vfb_dma_source_last = dma_stream_last;
assign dma_stream_ready = vfb_dma_source_ready;
assign sink_ready = 1'd1;
assign tmdsencoder0_d0 = sink_payload_b;
assign tmdsencoder0_c = {sink_payload_vsync, sink_payload_hsync};
assign tmdsencoder0_de = sink_payload_de;
assign tmdsencoder1_d0 = sink_payload_g;
assign tmdsencoder1_c = 1'd0;
assign tmdsencoder1_de = sink_payload_de;
assign tmdsencoder2_d0 = sink_payload_r;
assign tmdsencoder2_c = 1'd0;
assign tmdsencoder2_de = sink_payload_de;
assign tmdsencoder3_d0 = sink_payload_b;
assign tmdsencoder3_c = {sink_payload_vsync, sink_payload_hsync};
assign tmdsencoder3_de = sink_payload_de;
assign tmdsencoder4_d0 = sink_payload_g;
assign tmdsencoder4_c = 1'd0;
assign tmdsencoder4_de = sink_payload_de;
assign tmdsencoder5_d0 = sink_payload_r;
assign tmdsencoder5_c = 1'd0;
assign tmdsencoder5_de = sink_payload_de;
assign tmdsencoder0_q_m8_n = ((tmdsencoder0_n1d > 3'd4) | ((tmdsencoder0_n1d == 3'd4) & (~tmdsencoder0_d1[0])));
assign videohdmi10to1serializer0_sink_sink_valid = 1'd1;
assign videohdmi10to1serializer0_sink_sink_payload_data = tmdsencoder0_out;
assign videohdmi10to1serializer0_sink_valid = videohdmi10to1serializer0_source_source_valid;
assign videohdmi10to1serializer0_source_source_ready = videohdmi10to1serializer0_sink_ready;
assign videohdmi10to1serializer0_sink_first = videohdmi10to1serializer0_source_source_first;
assign videohdmi10to1serializer0_sink_last = videohdmi10to1serializer0_source_source_last;
assign videohdmi10to1serializer0_sink_payload_data = videohdmi10to1serializer0_source_source_payload_data;
assign videohdmi10to1serializer0_source_ready = 1'd1;
assign videohdmi10to1serializer0_cdc_sink_valid = videohdmi10to1serializer0_sink_sink_valid;
assign videohdmi10to1serializer0_sink_sink_ready = videohdmi10to1serializer0_cdc_sink_ready;
assign videohdmi10to1serializer0_cdc_sink_first = videohdmi10to1serializer0_sink_sink_first;
assign videohdmi10to1serializer0_cdc_sink_last = videohdmi10to1serializer0_sink_sink_last;
assign videohdmi10to1serializer0_cdc_sink_payload_data = videohdmi10to1serializer0_sink_sink_payload_data;
assign videohdmi10to1serializer0_source_source_valid = videohdmi10to1serializer0_cdc_source_valid;
assign videohdmi10to1serializer0_cdc_source_ready = videohdmi10to1serializer0_source_source_ready;
assign videohdmi10to1serializer0_source_source_first = videohdmi10to1serializer0_cdc_source_first;
assign videohdmi10to1serializer0_source_source_last = videohdmi10to1serializer0_cdc_source_last;
assign videohdmi10to1serializer0_source_source_payload_data = videohdmi10to1serializer0_cdc_source_payload_data;
assign videohdmi10to1serializer0_cdc_asyncfifo0_din = {videohdmi10to1serializer0_cdc_fifo_in_last, videohdmi10to1serializer0_cdc_fifo_in_first, videohdmi10to1serializer0_cdc_fifo_in_payload_data};
assign {videohdmi10to1serializer0_cdc_fifo_out_last, videohdmi10to1serializer0_cdc_fifo_out_first, videohdmi10to1serializer0_cdc_fifo_out_payload_data} = videohdmi10to1serializer0_cdc_asyncfifo0_dout;
assign {videohdmi10to1serializer0_cdc_fifo_out_last, videohdmi10to1serializer0_cdc_fifo_out_first, videohdmi10to1serializer0_cdc_fifo_out_payload_data} = videohdmi10to1serializer0_cdc_asyncfifo0_dout;
assign {videohdmi10to1serializer0_cdc_fifo_out_last, videohdmi10to1serializer0_cdc_fifo_out_first, videohdmi10to1serializer0_cdc_fifo_out_payload_data} = videohdmi10to1serializer0_cdc_asyncfifo0_dout;
assign videohdmi10to1serializer0_cdc_sink_ready = videohdmi10to1serializer0_cdc_asyncfifo0_writable;
assign videohdmi10to1serializer0_cdc_asyncfifo0_we = videohdmi10to1serializer0_cdc_sink_valid;
assign videohdmi10to1serializer0_cdc_fifo_in_first = videohdmi10to1serializer0_cdc_sink_first;
assign videohdmi10to1serializer0_cdc_fifo_in_last = videohdmi10to1serializer0_cdc_sink_last;
assign videohdmi10to1serializer0_cdc_fifo_in_payload_data = videohdmi10to1serializer0_cdc_sink_payload_data;
assign videohdmi10to1serializer0_cdc_source_valid = videohdmi10to1serializer0_cdc_asyncfifo0_readable;
assign videohdmi10to1serializer0_cdc_source_first = videohdmi10to1serializer0_cdc_fifo_out_first;
assign videohdmi10to1serializer0_cdc_source_last = videohdmi10to1serializer0_cdc_fifo_out_last;
assign videohdmi10to1serializer0_cdc_source_payload_data = videohdmi10to1serializer0_cdc_fifo_out_payload_data;
assign videohdmi10to1serializer0_cdc_asyncfifo0_re = videohdmi10to1serializer0_cdc_source_ready;
assign videohdmi10to1serializer0_cdc_graycounter0_ce = (videohdmi10to1serializer0_cdc_asyncfifo0_writable & videohdmi10to1serializer0_cdc_asyncfifo0_we);
assign videohdmi10to1serializer0_cdc_graycounter1_ce = (videohdmi10to1serializer0_cdc_asyncfifo0_readable & videohdmi10to1serializer0_cdc_asyncfifo0_re);
assign videohdmi10to1serializer0_cdc_asyncfifo0_writable = (((videohdmi10to1serializer0_cdc_graycounter0_q[2] == videohdmi10to1serializer0_cdc_consume_wdomain[2]) | (videohdmi10to1serializer0_cdc_graycounter0_q[1] == videohdmi10to1serializer0_cdc_consume_wdomain[1])) | (videohdmi10to1serializer0_cdc_graycounter0_q[0] != videohdmi10to1serializer0_cdc_consume_wdomain[0]));
assign videohdmi10to1serializer0_cdc_asyncfifo0_readable = (videohdmi10to1serializer0_cdc_graycounter1_q != videohdmi10to1serializer0_cdc_produce_rdomain);
assign videohdmi10to1serializer0_cdc_wrport_adr = videohdmi10to1serializer0_cdc_graycounter0_q_binary[1:0];
assign videohdmi10to1serializer0_cdc_wrport_dat_w = videohdmi10to1serializer0_cdc_asyncfifo0_din;
assign videohdmi10to1serializer0_cdc_wrport_we = videohdmi10to1serializer0_cdc_graycounter0_ce;
assign videohdmi10to1serializer0_cdc_rdport_adr = videohdmi10to1serializer0_cdc_graycounter1_q_next_binary[1:0];
assign videohdmi10to1serializer0_cdc_asyncfifo0_dout = videohdmi10to1serializer0_cdc_rdport_dat_r;
always @(*) begin
    videohdmi10to1serializer0_cdc_graycounter0_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer0_cdc_graycounter0_ce) begin
        videohdmi10to1serializer0_cdc_graycounter0_q_next_binary <= (videohdmi10to1serializer0_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer0_cdc_graycounter0_q_next_binary <= videohdmi10to1serializer0_cdc_graycounter0_q_binary;
    end
end
assign videohdmi10to1serializer0_cdc_graycounter0_q_next = (videohdmi10to1serializer0_cdc_graycounter0_q_next_binary ^ videohdmi10to1serializer0_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
    videohdmi10to1serializer0_cdc_graycounter1_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer0_cdc_graycounter1_ce) begin
        videohdmi10to1serializer0_cdc_graycounter1_q_next_binary <= (videohdmi10to1serializer0_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer0_cdc_graycounter1_q_next_binary <= videohdmi10to1serializer0_cdc_graycounter1_q_binary;
    end
end
assign videohdmi10to1serializer0_cdc_graycounter1_q_next = (videohdmi10to1serializer0_cdc_graycounter1_q_next_binary ^ videohdmi10to1serializer0_cdc_graycounter1_q_next_binary[2:1]);
assign videohdmi10to1serializer0_sink_ready = (videohdmi10to1serializer0_level < 4'd10);
assign videohdmi10to1serializer0_source_valid = (videohdmi10to1serializer0_level >= 2'd2);
assign videohdmi10to1serializer0_i_inc = (videohdmi10to1serializer0_sink_valid & videohdmi10to1serializer0_sink_ready);
assign videohdmi10to1serializer0_o_inc = (videohdmi10to1serializer0_source_valid & videohdmi10to1serializer0_source_ready);
assign videohdmi10to1serializer0_i_data = {videohdmi10to1serializer0_sink_payload_data[0], videohdmi10to1serializer0_sink_payload_data[1], videohdmi10to1serializer0_sink_payload_data[2], videohdmi10to1serializer0_sink_payload_data[3], videohdmi10to1serializer0_sink_payload_data[4], videohdmi10to1serializer0_sink_payload_data[5], videohdmi10to1serializer0_sink_payload_data[6], videohdmi10to1serializer0_sink_payload_data[7], videohdmi10to1serializer0_sink_payload_data[8], videohdmi10to1serializer0_sink_payload_data[9]};
always @(*) begin
    videohdmi10to1serializer0_o_data <= 2'd0;
    case (videohdmi10to1serializer0_o_count)
        1'd0: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[19:18];
        end
        1'd1: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[17:16];
        end
        2'd2: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[15:14];
        end
        2'd3: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[13:12];
        end
        3'd4: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[11:10];
        end
        3'd5: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[9:8];
        end
        3'd6: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[7:6];
        end
        3'd7: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[5:4];
        end
        4'd8: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[3:2];
        end
        4'd9: begin
            videohdmi10to1serializer0_o_data <= videohdmi10to1serializer0_shift_register[1:0];
        end
    endcase
end
assign videohdmi10to1serializer0_source_payload_data = {videohdmi10to1serializer0_o_data[0], videohdmi10to1serializer0_o_data[1]};
assign tmdsencoder1_q_m8_n = ((tmdsencoder1_n1d > 3'd4) | ((tmdsencoder1_n1d == 3'd4) & (~tmdsencoder1_d1[0])));
assign videohdmi10to1serializer1_sink_sink_valid = 1'd1;
assign videohdmi10to1serializer1_sink_sink_payload_data = tmdsencoder1_out;
assign videohdmi10to1serializer1_sink_valid = videohdmi10to1serializer1_source_source_valid;
assign videohdmi10to1serializer1_source_source_ready = videohdmi10to1serializer1_sink_ready;
assign videohdmi10to1serializer1_sink_first = videohdmi10to1serializer1_source_source_first;
assign videohdmi10to1serializer1_sink_last = videohdmi10to1serializer1_source_source_last;
assign videohdmi10to1serializer1_sink_payload_data = videohdmi10to1serializer1_source_source_payload_data;
assign videohdmi10to1serializer1_source_ready = 1'd1;
assign videohdmi10to1serializer1_cdc_sink_valid = videohdmi10to1serializer1_sink_sink_valid;
assign videohdmi10to1serializer1_sink_sink_ready = videohdmi10to1serializer1_cdc_sink_ready;
assign videohdmi10to1serializer1_cdc_sink_first = videohdmi10to1serializer1_sink_sink_first;
assign videohdmi10to1serializer1_cdc_sink_last = videohdmi10to1serializer1_sink_sink_last;
assign videohdmi10to1serializer1_cdc_sink_payload_data = videohdmi10to1serializer1_sink_sink_payload_data;
assign videohdmi10to1serializer1_source_source_valid = videohdmi10to1serializer1_cdc_source_valid;
assign videohdmi10to1serializer1_cdc_source_ready = videohdmi10to1serializer1_source_source_ready;
assign videohdmi10to1serializer1_source_source_first = videohdmi10to1serializer1_cdc_source_first;
assign videohdmi10to1serializer1_source_source_last = videohdmi10to1serializer1_cdc_source_last;
assign videohdmi10to1serializer1_source_source_payload_data = videohdmi10to1serializer1_cdc_source_payload_data;
assign videohdmi10to1serializer1_cdc_asyncfifo1_din = {videohdmi10to1serializer1_cdc_fifo_in_last, videohdmi10to1serializer1_cdc_fifo_in_first, videohdmi10to1serializer1_cdc_fifo_in_payload_data};
assign {videohdmi10to1serializer1_cdc_fifo_out_last, videohdmi10to1serializer1_cdc_fifo_out_first, videohdmi10to1serializer1_cdc_fifo_out_payload_data} = videohdmi10to1serializer1_cdc_asyncfifo1_dout;
assign {videohdmi10to1serializer1_cdc_fifo_out_last, videohdmi10to1serializer1_cdc_fifo_out_first, videohdmi10to1serializer1_cdc_fifo_out_payload_data} = videohdmi10to1serializer1_cdc_asyncfifo1_dout;
assign {videohdmi10to1serializer1_cdc_fifo_out_last, videohdmi10to1serializer1_cdc_fifo_out_first, videohdmi10to1serializer1_cdc_fifo_out_payload_data} = videohdmi10to1serializer1_cdc_asyncfifo1_dout;
assign videohdmi10to1serializer1_cdc_sink_ready = videohdmi10to1serializer1_cdc_asyncfifo1_writable;
assign videohdmi10to1serializer1_cdc_asyncfifo1_we = videohdmi10to1serializer1_cdc_sink_valid;
assign videohdmi10to1serializer1_cdc_fifo_in_first = videohdmi10to1serializer1_cdc_sink_first;
assign videohdmi10to1serializer1_cdc_fifo_in_last = videohdmi10to1serializer1_cdc_sink_last;
assign videohdmi10to1serializer1_cdc_fifo_in_payload_data = videohdmi10to1serializer1_cdc_sink_payload_data;
assign videohdmi10to1serializer1_cdc_source_valid = videohdmi10to1serializer1_cdc_asyncfifo1_readable;
assign videohdmi10to1serializer1_cdc_source_first = videohdmi10to1serializer1_cdc_fifo_out_first;
assign videohdmi10to1serializer1_cdc_source_last = videohdmi10to1serializer1_cdc_fifo_out_last;
assign videohdmi10to1serializer1_cdc_source_payload_data = videohdmi10to1serializer1_cdc_fifo_out_payload_data;
assign videohdmi10to1serializer1_cdc_asyncfifo1_re = videohdmi10to1serializer1_cdc_source_ready;
assign videohdmi10to1serializer1_cdc_graycounter2_ce = (videohdmi10to1serializer1_cdc_asyncfifo1_writable & videohdmi10to1serializer1_cdc_asyncfifo1_we);
assign videohdmi10to1serializer1_cdc_graycounter3_ce = (videohdmi10to1serializer1_cdc_asyncfifo1_readable & videohdmi10to1serializer1_cdc_asyncfifo1_re);
assign videohdmi10to1serializer1_cdc_asyncfifo1_writable = (((videohdmi10to1serializer1_cdc_graycounter2_q[2] == videohdmi10to1serializer1_cdc_consume_wdomain[2]) | (videohdmi10to1serializer1_cdc_graycounter2_q[1] == videohdmi10to1serializer1_cdc_consume_wdomain[1])) | (videohdmi10to1serializer1_cdc_graycounter2_q[0] != videohdmi10to1serializer1_cdc_consume_wdomain[0]));
assign videohdmi10to1serializer1_cdc_asyncfifo1_readable = (videohdmi10to1serializer1_cdc_graycounter3_q != videohdmi10to1serializer1_cdc_produce_rdomain);
assign videohdmi10to1serializer1_cdc_wrport_adr = videohdmi10to1serializer1_cdc_graycounter2_q_binary[1:0];
assign videohdmi10to1serializer1_cdc_wrport_dat_w = videohdmi10to1serializer1_cdc_asyncfifo1_din;
assign videohdmi10to1serializer1_cdc_wrport_we = videohdmi10to1serializer1_cdc_graycounter2_ce;
assign videohdmi10to1serializer1_cdc_rdport_adr = videohdmi10to1serializer1_cdc_graycounter3_q_next_binary[1:0];
assign videohdmi10to1serializer1_cdc_asyncfifo1_dout = videohdmi10to1serializer1_cdc_rdport_dat_r;
always @(*) begin
    videohdmi10to1serializer1_cdc_graycounter2_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer1_cdc_graycounter2_ce) begin
        videohdmi10to1serializer1_cdc_graycounter2_q_next_binary <= (videohdmi10to1serializer1_cdc_graycounter2_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer1_cdc_graycounter2_q_next_binary <= videohdmi10to1serializer1_cdc_graycounter2_q_binary;
    end
end
assign videohdmi10to1serializer1_cdc_graycounter2_q_next = (videohdmi10to1serializer1_cdc_graycounter2_q_next_binary ^ videohdmi10to1serializer1_cdc_graycounter2_q_next_binary[2:1]);
always @(*) begin
    videohdmi10to1serializer1_cdc_graycounter3_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer1_cdc_graycounter3_ce) begin
        videohdmi10to1serializer1_cdc_graycounter3_q_next_binary <= (videohdmi10to1serializer1_cdc_graycounter3_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer1_cdc_graycounter3_q_next_binary <= videohdmi10to1serializer1_cdc_graycounter3_q_binary;
    end
end
assign videohdmi10to1serializer1_cdc_graycounter3_q_next = (videohdmi10to1serializer1_cdc_graycounter3_q_next_binary ^ videohdmi10to1serializer1_cdc_graycounter3_q_next_binary[2:1]);
assign videohdmi10to1serializer1_sink_ready = (videohdmi10to1serializer1_level < 4'd10);
assign videohdmi10to1serializer1_source_valid = (videohdmi10to1serializer1_level >= 2'd2);
assign videohdmi10to1serializer1_i_inc = (videohdmi10to1serializer1_sink_valid & videohdmi10to1serializer1_sink_ready);
assign videohdmi10to1serializer1_o_inc = (videohdmi10to1serializer1_source_valid & videohdmi10to1serializer1_source_ready);
assign videohdmi10to1serializer1_i_data = {videohdmi10to1serializer1_sink_payload_data[0], videohdmi10to1serializer1_sink_payload_data[1], videohdmi10to1serializer1_sink_payload_data[2], videohdmi10to1serializer1_sink_payload_data[3], videohdmi10to1serializer1_sink_payload_data[4], videohdmi10to1serializer1_sink_payload_data[5], videohdmi10to1serializer1_sink_payload_data[6], videohdmi10to1serializer1_sink_payload_data[7], videohdmi10to1serializer1_sink_payload_data[8], videohdmi10to1serializer1_sink_payload_data[9]};
always @(*) begin
    videohdmi10to1serializer1_o_data <= 2'd0;
    case (videohdmi10to1serializer1_o_count)
        1'd0: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[19:18];
        end
        1'd1: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[17:16];
        end
        2'd2: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[15:14];
        end
        2'd3: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[13:12];
        end
        3'd4: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[11:10];
        end
        3'd5: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[9:8];
        end
        3'd6: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[7:6];
        end
        3'd7: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[5:4];
        end
        4'd8: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[3:2];
        end
        4'd9: begin
            videohdmi10to1serializer1_o_data <= videohdmi10to1serializer1_shift_register[1:0];
        end
    endcase
end
assign videohdmi10to1serializer1_source_payload_data = {videohdmi10to1serializer1_o_data[0], videohdmi10to1serializer1_o_data[1]};
assign tmdsencoder2_q_m8_n = ((tmdsencoder2_n1d > 3'd4) | ((tmdsencoder2_n1d == 3'd4) & (~tmdsencoder2_d1[0])));
assign videohdmi10to1serializer2_sink_sink_valid = 1'd1;
assign videohdmi10to1serializer2_sink_sink_payload_data = tmdsencoder2_out;
assign videohdmi10to1serializer2_sink_valid = videohdmi10to1serializer2_source_source_valid;
assign videohdmi10to1serializer2_source_source_ready = videohdmi10to1serializer2_sink_ready;
assign videohdmi10to1serializer2_sink_first = videohdmi10to1serializer2_source_source_first;
assign videohdmi10to1serializer2_sink_last = videohdmi10to1serializer2_source_source_last;
assign videohdmi10to1serializer2_sink_payload_data = videohdmi10to1serializer2_source_source_payload_data;
assign videohdmi10to1serializer2_source_ready = 1'd1;
assign videohdmi10to1serializer2_cdc_sink_valid = videohdmi10to1serializer2_sink_sink_valid;
assign videohdmi10to1serializer2_sink_sink_ready = videohdmi10to1serializer2_cdc_sink_ready;
assign videohdmi10to1serializer2_cdc_sink_first = videohdmi10to1serializer2_sink_sink_first;
assign videohdmi10to1serializer2_cdc_sink_last = videohdmi10to1serializer2_sink_sink_last;
assign videohdmi10to1serializer2_cdc_sink_payload_data = videohdmi10to1serializer2_sink_sink_payload_data;
assign videohdmi10to1serializer2_source_source_valid = videohdmi10to1serializer2_cdc_source_valid;
assign videohdmi10to1serializer2_cdc_source_ready = videohdmi10to1serializer2_source_source_ready;
assign videohdmi10to1serializer2_source_source_first = videohdmi10to1serializer2_cdc_source_first;
assign videohdmi10to1serializer2_source_source_last = videohdmi10to1serializer2_cdc_source_last;
assign videohdmi10to1serializer2_source_source_payload_data = videohdmi10to1serializer2_cdc_source_payload_data;
assign videohdmi10to1serializer2_cdc_asyncfifo2_din = {videohdmi10to1serializer2_cdc_fifo_in_last, videohdmi10to1serializer2_cdc_fifo_in_first, videohdmi10to1serializer2_cdc_fifo_in_payload_data};
assign {videohdmi10to1serializer2_cdc_fifo_out_last, videohdmi10to1serializer2_cdc_fifo_out_first, videohdmi10to1serializer2_cdc_fifo_out_payload_data} = videohdmi10to1serializer2_cdc_asyncfifo2_dout;
assign {videohdmi10to1serializer2_cdc_fifo_out_last, videohdmi10to1serializer2_cdc_fifo_out_first, videohdmi10to1serializer2_cdc_fifo_out_payload_data} = videohdmi10to1serializer2_cdc_asyncfifo2_dout;
assign {videohdmi10to1serializer2_cdc_fifo_out_last, videohdmi10to1serializer2_cdc_fifo_out_first, videohdmi10to1serializer2_cdc_fifo_out_payload_data} = videohdmi10to1serializer2_cdc_asyncfifo2_dout;
assign videohdmi10to1serializer2_cdc_sink_ready = videohdmi10to1serializer2_cdc_asyncfifo2_writable;
assign videohdmi10to1serializer2_cdc_asyncfifo2_we = videohdmi10to1serializer2_cdc_sink_valid;
assign videohdmi10to1serializer2_cdc_fifo_in_first = videohdmi10to1serializer2_cdc_sink_first;
assign videohdmi10to1serializer2_cdc_fifo_in_last = videohdmi10to1serializer2_cdc_sink_last;
assign videohdmi10to1serializer2_cdc_fifo_in_payload_data = videohdmi10to1serializer2_cdc_sink_payload_data;
assign videohdmi10to1serializer2_cdc_source_valid = videohdmi10to1serializer2_cdc_asyncfifo2_readable;
assign videohdmi10to1serializer2_cdc_source_first = videohdmi10to1serializer2_cdc_fifo_out_first;
assign videohdmi10to1serializer2_cdc_source_last = videohdmi10to1serializer2_cdc_fifo_out_last;
assign videohdmi10to1serializer2_cdc_source_payload_data = videohdmi10to1serializer2_cdc_fifo_out_payload_data;
assign videohdmi10to1serializer2_cdc_asyncfifo2_re = videohdmi10to1serializer2_cdc_source_ready;
assign videohdmi10to1serializer2_cdc_graycounter4_ce = (videohdmi10to1serializer2_cdc_asyncfifo2_writable & videohdmi10to1serializer2_cdc_asyncfifo2_we);
assign videohdmi10to1serializer2_cdc_graycounter5_ce = (videohdmi10to1serializer2_cdc_asyncfifo2_readable & videohdmi10to1serializer2_cdc_asyncfifo2_re);
assign videohdmi10to1serializer2_cdc_asyncfifo2_writable = (((videohdmi10to1serializer2_cdc_graycounter4_q[2] == videohdmi10to1serializer2_cdc_consume_wdomain[2]) | (videohdmi10to1serializer2_cdc_graycounter4_q[1] == videohdmi10to1serializer2_cdc_consume_wdomain[1])) | (videohdmi10to1serializer2_cdc_graycounter4_q[0] != videohdmi10to1serializer2_cdc_consume_wdomain[0]));
assign videohdmi10to1serializer2_cdc_asyncfifo2_readable = (videohdmi10to1serializer2_cdc_graycounter5_q != videohdmi10to1serializer2_cdc_produce_rdomain);
assign videohdmi10to1serializer2_cdc_wrport_adr = videohdmi10to1serializer2_cdc_graycounter4_q_binary[1:0];
assign videohdmi10to1serializer2_cdc_wrport_dat_w = videohdmi10to1serializer2_cdc_asyncfifo2_din;
assign videohdmi10to1serializer2_cdc_wrport_we = videohdmi10to1serializer2_cdc_graycounter4_ce;
assign videohdmi10to1serializer2_cdc_rdport_adr = videohdmi10to1serializer2_cdc_graycounter5_q_next_binary[1:0];
assign videohdmi10to1serializer2_cdc_asyncfifo2_dout = videohdmi10to1serializer2_cdc_rdport_dat_r;
always @(*) begin
    videohdmi10to1serializer2_cdc_graycounter4_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer2_cdc_graycounter4_ce) begin
        videohdmi10to1serializer2_cdc_graycounter4_q_next_binary <= (videohdmi10to1serializer2_cdc_graycounter4_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer2_cdc_graycounter4_q_next_binary <= videohdmi10to1serializer2_cdc_graycounter4_q_binary;
    end
end
assign videohdmi10to1serializer2_cdc_graycounter4_q_next = (videohdmi10to1serializer2_cdc_graycounter4_q_next_binary ^ videohdmi10to1serializer2_cdc_graycounter4_q_next_binary[2:1]);
always @(*) begin
    videohdmi10to1serializer2_cdc_graycounter5_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer2_cdc_graycounter5_ce) begin
        videohdmi10to1serializer2_cdc_graycounter5_q_next_binary <= (videohdmi10to1serializer2_cdc_graycounter5_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer2_cdc_graycounter5_q_next_binary <= videohdmi10to1serializer2_cdc_graycounter5_q_binary;
    end
end
assign videohdmi10to1serializer2_cdc_graycounter5_q_next = (videohdmi10to1serializer2_cdc_graycounter5_q_next_binary ^ videohdmi10to1serializer2_cdc_graycounter5_q_next_binary[2:1]);
assign videohdmi10to1serializer2_sink_ready = (videohdmi10to1serializer2_level < 4'd10);
assign videohdmi10to1serializer2_source_valid = (videohdmi10to1serializer2_level >= 2'd2);
assign videohdmi10to1serializer2_i_inc = (videohdmi10to1serializer2_sink_valid & videohdmi10to1serializer2_sink_ready);
assign videohdmi10to1serializer2_o_inc = (videohdmi10to1serializer2_source_valid & videohdmi10to1serializer2_source_ready);
assign videohdmi10to1serializer2_i_data = {videohdmi10to1serializer2_sink_payload_data[0], videohdmi10to1serializer2_sink_payload_data[1], videohdmi10to1serializer2_sink_payload_data[2], videohdmi10to1serializer2_sink_payload_data[3], videohdmi10to1serializer2_sink_payload_data[4], videohdmi10to1serializer2_sink_payload_data[5], videohdmi10to1serializer2_sink_payload_data[6], videohdmi10to1serializer2_sink_payload_data[7], videohdmi10to1serializer2_sink_payload_data[8], videohdmi10to1serializer2_sink_payload_data[9]};
always @(*) begin
    videohdmi10to1serializer2_o_data <= 2'd0;
    case (videohdmi10to1serializer2_o_count)
        1'd0: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[19:18];
        end
        1'd1: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[17:16];
        end
        2'd2: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[15:14];
        end
        2'd3: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[13:12];
        end
        3'd4: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[11:10];
        end
        3'd5: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[9:8];
        end
        3'd6: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[7:6];
        end
        3'd7: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[5:4];
        end
        4'd8: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[3:2];
        end
        4'd9: begin
            videohdmi10to1serializer2_o_data <= videohdmi10to1serializer2_shift_register[1:0];
        end
    endcase
end
assign videohdmi10to1serializer2_source_payload_data = {videohdmi10to1serializer2_o_data[0], videohdmi10to1serializer2_o_data[1]};
assign tmdsencoder3_q_m8_n = ((tmdsencoder3_n1d > 3'd4) | ((tmdsencoder3_n1d == 3'd4) & (~tmdsencoder3_d1[0])));
assign videohdmi10to1serializer3_sink_sink_valid = 1'd1;
assign videohdmi10to1serializer3_sink_sink_payload_data = (~tmdsencoder3_out);
assign videohdmi10to1serializer3_sink_valid = videohdmi10to1serializer3_source_source_valid;
assign videohdmi10to1serializer3_source_source_ready = videohdmi10to1serializer3_sink_ready;
assign videohdmi10to1serializer3_sink_first = videohdmi10to1serializer3_source_source_first;
assign videohdmi10to1serializer3_sink_last = videohdmi10to1serializer3_source_source_last;
assign videohdmi10to1serializer3_sink_payload_data = videohdmi10to1serializer3_source_source_payload_data;
assign videohdmi10to1serializer3_source_ready = 1'd1;
assign videohdmi10to1serializer3_cdc_sink_valid = videohdmi10to1serializer3_sink_sink_valid;
assign videohdmi10to1serializer3_sink_sink_ready = videohdmi10to1serializer3_cdc_sink_ready;
assign videohdmi10to1serializer3_cdc_sink_first = videohdmi10to1serializer3_sink_sink_first;
assign videohdmi10to1serializer3_cdc_sink_last = videohdmi10to1serializer3_sink_sink_last;
assign videohdmi10to1serializer3_cdc_sink_payload_data = videohdmi10to1serializer3_sink_sink_payload_data;
assign videohdmi10to1serializer3_source_source_valid = videohdmi10to1serializer3_cdc_source_valid;
assign videohdmi10to1serializer3_cdc_source_ready = videohdmi10to1serializer3_source_source_ready;
assign videohdmi10to1serializer3_source_source_first = videohdmi10to1serializer3_cdc_source_first;
assign videohdmi10to1serializer3_source_source_last = videohdmi10to1serializer3_cdc_source_last;
assign videohdmi10to1serializer3_source_source_payload_data = videohdmi10to1serializer3_cdc_source_payload_data;
assign videohdmi10to1serializer3_cdc_asyncfifo3_din = {videohdmi10to1serializer3_cdc_fifo_in_last, videohdmi10to1serializer3_cdc_fifo_in_first, videohdmi10to1serializer3_cdc_fifo_in_payload_data};
assign {videohdmi10to1serializer3_cdc_fifo_out_last, videohdmi10to1serializer3_cdc_fifo_out_first, videohdmi10to1serializer3_cdc_fifo_out_payload_data} = videohdmi10to1serializer3_cdc_asyncfifo3_dout;
assign {videohdmi10to1serializer3_cdc_fifo_out_last, videohdmi10to1serializer3_cdc_fifo_out_first, videohdmi10to1serializer3_cdc_fifo_out_payload_data} = videohdmi10to1serializer3_cdc_asyncfifo3_dout;
assign {videohdmi10to1serializer3_cdc_fifo_out_last, videohdmi10to1serializer3_cdc_fifo_out_first, videohdmi10to1serializer3_cdc_fifo_out_payload_data} = videohdmi10to1serializer3_cdc_asyncfifo3_dout;
assign videohdmi10to1serializer3_cdc_sink_ready = videohdmi10to1serializer3_cdc_asyncfifo3_writable;
assign videohdmi10to1serializer3_cdc_asyncfifo3_we = videohdmi10to1serializer3_cdc_sink_valid;
assign videohdmi10to1serializer3_cdc_fifo_in_first = videohdmi10to1serializer3_cdc_sink_first;
assign videohdmi10to1serializer3_cdc_fifo_in_last = videohdmi10to1serializer3_cdc_sink_last;
assign videohdmi10to1serializer3_cdc_fifo_in_payload_data = videohdmi10to1serializer3_cdc_sink_payload_data;
assign videohdmi10to1serializer3_cdc_source_valid = videohdmi10to1serializer3_cdc_asyncfifo3_readable;
assign videohdmi10to1serializer3_cdc_source_first = videohdmi10to1serializer3_cdc_fifo_out_first;
assign videohdmi10to1serializer3_cdc_source_last = videohdmi10to1serializer3_cdc_fifo_out_last;
assign videohdmi10to1serializer3_cdc_source_payload_data = videohdmi10to1serializer3_cdc_fifo_out_payload_data;
assign videohdmi10to1serializer3_cdc_asyncfifo3_re = videohdmi10to1serializer3_cdc_source_ready;
assign videohdmi10to1serializer3_cdc_graycounter6_ce = (videohdmi10to1serializer3_cdc_asyncfifo3_writable & videohdmi10to1serializer3_cdc_asyncfifo3_we);
assign videohdmi10to1serializer3_cdc_graycounter7_ce = (videohdmi10to1serializer3_cdc_asyncfifo3_readable & videohdmi10to1serializer3_cdc_asyncfifo3_re);
assign videohdmi10to1serializer3_cdc_asyncfifo3_writable = (((videohdmi10to1serializer3_cdc_graycounter6_q[2] == videohdmi10to1serializer3_cdc_consume_wdomain[2]) | (videohdmi10to1serializer3_cdc_graycounter6_q[1] == videohdmi10to1serializer3_cdc_consume_wdomain[1])) | (videohdmi10to1serializer3_cdc_graycounter6_q[0] != videohdmi10to1serializer3_cdc_consume_wdomain[0]));
assign videohdmi10to1serializer3_cdc_asyncfifo3_readable = (videohdmi10to1serializer3_cdc_graycounter7_q != videohdmi10to1serializer3_cdc_produce_rdomain);
assign videohdmi10to1serializer3_cdc_wrport_adr = videohdmi10to1serializer3_cdc_graycounter6_q_binary[1:0];
assign videohdmi10to1serializer3_cdc_wrport_dat_w = videohdmi10to1serializer3_cdc_asyncfifo3_din;
assign videohdmi10to1serializer3_cdc_wrport_we = videohdmi10to1serializer3_cdc_graycounter6_ce;
assign videohdmi10to1serializer3_cdc_rdport_adr = videohdmi10to1serializer3_cdc_graycounter7_q_next_binary[1:0];
assign videohdmi10to1serializer3_cdc_asyncfifo3_dout = videohdmi10to1serializer3_cdc_rdport_dat_r;
always @(*) begin
    videohdmi10to1serializer3_cdc_graycounter6_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer3_cdc_graycounter6_ce) begin
        videohdmi10to1serializer3_cdc_graycounter6_q_next_binary <= (videohdmi10to1serializer3_cdc_graycounter6_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer3_cdc_graycounter6_q_next_binary <= videohdmi10to1serializer3_cdc_graycounter6_q_binary;
    end
end
assign videohdmi10to1serializer3_cdc_graycounter6_q_next = (videohdmi10to1serializer3_cdc_graycounter6_q_next_binary ^ videohdmi10to1serializer3_cdc_graycounter6_q_next_binary[2:1]);
always @(*) begin
    videohdmi10to1serializer3_cdc_graycounter7_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer3_cdc_graycounter7_ce) begin
        videohdmi10to1serializer3_cdc_graycounter7_q_next_binary <= (videohdmi10to1serializer3_cdc_graycounter7_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer3_cdc_graycounter7_q_next_binary <= videohdmi10to1serializer3_cdc_graycounter7_q_binary;
    end
end
assign videohdmi10to1serializer3_cdc_graycounter7_q_next = (videohdmi10to1serializer3_cdc_graycounter7_q_next_binary ^ videohdmi10to1serializer3_cdc_graycounter7_q_next_binary[2:1]);
assign videohdmi10to1serializer3_sink_ready = (videohdmi10to1serializer3_level < 4'd10);
assign videohdmi10to1serializer3_source_valid = (videohdmi10to1serializer3_level >= 2'd2);
assign videohdmi10to1serializer3_i_inc = (videohdmi10to1serializer3_sink_valid & videohdmi10to1serializer3_sink_ready);
assign videohdmi10to1serializer3_o_inc = (videohdmi10to1serializer3_source_valid & videohdmi10to1serializer3_source_ready);
assign videohdmi10to1serializer3_i_data = {videohdmi10to1serializer3_sink_payload_data[0], videohdmi10to1serializer3_sink_payload_data[1], videohdmi10to1serializer3_sink_payload_data[2], videohdmi10to1serializer3_sink_payload_data[3], videohdmi10to1serializer3_sink_payload_data[4], videohdmi10to1serializer3_sink_payload_data[5], videohdmi10to1serializer3_sink_payload_data[6], videohdmi10to1serializer3_sink_payload_data[7], videohdmi10to1serializer3_sink_payload_data[8], videohdmi10to1serializer3_sink_payload_data[9]};
always @(*) begin
    videohdmi10to1serializer3_o_data <= 2'd0;
    case (videohdmi10to1serializer3_o_count)
        1'd0: begin
            videohdmi10to1serializer3_o_data <= videohdmi10to1serializer3_shift_register[19:18];
        end
        1'd1: begin
            videohdmi10to1serializer3_o_data <= videohdmi10to1serializer3_shift_register[17:16];
        end
        2'd2: begin
            videohdmi10to1serializer3_o_data <= videohdmi10to1serializer3_shift_register[15:14];
        end
        2'd3: begin
            videohdmi10to1serializer3_o_data <= videohdmi10to1serializer3_shift_register[13:12];
        end
        3'd4: begin
            videohdmi10to1serializer3_o_data <= videohdmi10to1serializer3_shift_register[11:10];
        end
        3'd5: begin
            videohdmi10to1serializer3_o_data <= videohdmi10to1serializer3_shift_register[9:8];
        end
        3'd6: begin
            videohdmi10to1serializer3_o_data <= videohdmi10to1serializer3_shift_register[7:6];
        end
        3'd7: begin
            videohdmi10to1serializer3_o_data <= videohdmi10to1serializer3_shift_register[5:4];
        end
        4'd8: begin
            videohdmi10to1serializer3_o_data <= videohdmi10to1serializer3_shift_register[3:2];
        end
        4'd9: begin
            videohdmi10to1serializer3_o_data <= videohdmi10to1serializer3_shift_register[1:0];
        end
    endcase
end
assign videohdmi10to1serializer3_source_payload_data = {videohdmi10to1serializer3_o_data[0], videohdmi10to1serializer3_o_data[1]};
assign tmdsencoder4_q_m8_n = ((tmdsencoder4_n1d > 3'd4) | ((tmdsencoder4_n1d == 3'd4) & (~tmdsencoder4_d1[0])));
assign videohdmi10to1serializer4_sink_sink_valid = 1'd1;
assign videohdmi10to1serializer4_sink_sink_payload_data = (~tmdsencoder4_out);
assign videohdmi10to1serializer4_sink_valid = videohdmi10to1serializer4_source_source_valid;
assign videohdmi10to1serializer4_source_source_ready = videohdmi10to1serializer4_sink_ready;
assign videohdmi10to1serializer4_sink_first = videohdmi10to1serializer4_source_source_first;
assign videohdmi10to1serializer4_sink_last = videohdmi10to1serializer4_source_source_last;
assign videohdmi10to1serializer4_sink_payload_data = videohdmi10to1serializer4_source_source_payload_data;
assign videohdmi10to1serializer4_source_ready = 1'd1;
assign videohdmi10to1serializer4_cdc_sink_valid = videohdmi10to1serializer4_sink_sink_valid;
assign videohdmi10to1serializer4_sink_sink_ready = videohdmi10to1serializer4_cdc_sink_ready;
assign videohdmi10to1serializer4_cdc_sink_first = videohdmi10to1serializer4_sink_sink_first;
assign videohdmi10to1serializer4_cdc_sink_last = videohdmi10to1serializer4_sink_sink_last;
assign videohdmi10to1serializer4_cdc_sink_payload_data = videohdmi10to1serializer4_sink_sink_payload_data;
assign videohdmi10to1serializer4_source_source_valid = videohdmi10to1serializer4_cdc_source_valid;
assign videohdmi10to1serializer4_cdc_source_ready = videohdmi10to1serializer4_source_source_ready;
assign videohdmi10to1serializer4_source_source_first = videohdmi10to1serializer4_cdc_source_first;
assign videohdmi10to1serializer4_source_source_last = videohdmi10to1serializer4_cdc_source_last;
assign videohdmi10to1serializer4_source_source_payload_data = videohdmi10to1serializer4_cdc_source_payload_data;
assign videohdmi10to1serializer4_cdc_asyncfifo4_din = {videohdmi10to1serializer4_cdc_fifo_in_last, videohdmi10to1serializer4_cdc_fifo_in_first, videohdmi10to1serializer4_cdc_fifo_in_payload_data};
assign {videohdmi10to1serializer4_cdc_fifo_out_last, videohdmi10to1serializer4_cdc_fifo_out_first, videohdmi10to1serializer4_cdc_fifo_out_payload_data} = videohdmi10to1serializer4_cdc_asyncfifo4_dout;
assign {videohdmi10to1serializer4_cdc_fifo_out_last, videohdmi10to1serializer4_cdc_fifo_out_first, videohdmi10to1serializer4_cdc_fifo_out_payload_data} = videohdmi10to1serializer4_cdc_asyncfifo4_dout;
assign {videohdmi10to1serializer4_cdc_fifo_out_last, videohdmi10to1serializer4_cdc_fifo_out_first, videohdmi10to1serializer4_cdc_fifo_out_payload_data} = videohdmi10to1serializer4_cdc_asyncfifo4_dout;
assign videohdmi10to1serializer4_cdc_sink_ready = videohdmi10to1serializer4_cdc_asyncfifo4_writable;
assign videohdmi10to1serializer4_cdc_asyncfifo4_we = videohdmi10to1serializer4_cdc_sink_valid;
assign videohdmi10to1serializer4_cdc_fifo_in_first = videohdmi10to1serializer4_cdc_sink_first;
assign videohdmi10to1serializer4_cdc_fifo_in_last = videohdmi10to1serializer4_cdc_sink_last;
assign videohdmi10to1serializer4_cdc_fifo_in_payload_data = videohdmi10to1serializer4_cdc_sink_payload_data;
assign videohdmi10to1serializer4_cdc_source_valid = videohdmi10to1serializer4_cdc_asyncfifo4_readable;
assign videohdmi10to1serializer4_cdc_source_first = videohdmi10to1serializer4_cdc_fifo_out_first;
assign videohdmi10to1serializer4_cdc_source_last = videohdmi10to1serializer4_cdc_fifo_out_last;
assign videohdmi10to1serializer4_cdc_source_payload_data = videohdmi10to1serializer4_cdc_fifo_out_payload_data;
assign videohdmi10to1serializer4_cdc_asyncfifo4_re = videohdmi10to1serializer4_cdc_source_ready;
assign videohdmi10to1serializer4_cdc_graycounter8_ce = (videohdmi10to1serializer4_cdc_asyncfifo4_writable & videohdmi10to1serializer4_cdc_asyncfifo4_we);
assign videohdmi10to1serializer4_cdc_graycounter9_ce = (videohdmi10to1serializer4_cdc_asyncfifo4_readable & videohdmi10to1serializer4_cdc_asyncfifo4_re);
assign videohdmi10to1serializer4_cdc_asyncfifo4_writable = (((videohdmi10to1serializer4_cdc_graycounter8_q[2] == videohdmi10to1serializer4_cdc_consume_wdomain[2]) | (videohdmi10to1serializer4_cdc_graycounter8_q[1] == videohdmi10to1serializer4_cdc_consume_wdomain[1])) | (videohdmi10to1serializer4_cdc_graycounter8_q[0] != videohdmi10to1serializer4_cdc_consume_wdomain[0]));
assign videohdmi10to1serializer4_cdc_asyncfifo4_readable = (videohdmi10to1serializer4_cdc_graycounter9_q != videohdmi10to1serializer4_cdc_produce_rdomain);
assign videohdmi10to1serializer4_cdc_wrport_adr = videohdmi10to1serializer4_cdc_graycounter8_q_binary[1:0];
assign videohdmi10to1serializer4_cdc_wrport_dat_w = videohdmi10to1serializer4_cdc_asyncfifo4_din;
assign videohdmi10to1serializer4_cdc_wrport_we = videohdmi10to1serializer4_cdc_graycounter8_ce;
assign videohdmi10to1serializer4_cdc_rdport_adr = videohdmi10to1serializer4_cdc_graycounter9_q_next_binary[1:0];
assign videohdmi10to1serializer4_cdc_asyncfifo4_dout = videohdmi10to1serializer4_cdc_rdport_dat_r;
always @(*) begin
    videohdmi10to1serializer4_cdc_graycounter8_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer4_cdc_graycounter8_ce) begin
        videohdmi10to1serializer4_cdc_graycounter8_q_next_binary <= (videohdmi10to1serializer4_cdc_graycounter8_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer4_cdc_graycounter8_q_next_binary <= videohdmi10to1serializer4_cdc_graycounter8_q_binary;
    end
end
assign videohdmi10to1serializer4_cdc_graycounter8_q_next = (videohdmi10to1serializer4_cdc_graycounter8_q_next_binary ^ videohdmi10to1serializer4_cdc_graycounter8_q_next_binary[2:1]);
always @(*) begin
    videohdmi10to1serializer4_cdc_graycounter9_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer4_cdc_graycounter9_ce) begin
        videohdmi10to1serializer4_cdc_graycounter9_q_next_binary <= (videohdmi10to1serializer4_cdc_graycounter9_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer4_cdc_graycounter9_q_next_binary <= videohdmi10to1serializer4_cdc_graycounter9_q_binary;
    end
end
assign videohdmi10to1serializer4_cdc_graycounter9_q_next = (videohdmi10to1serializer4_cdc_graycounter9_q_next_binary ^ videohdmi10to1serializer4_cdc_graycounter9_q_next_binary[2:1]);
assign videohdmi10to1serializer4_sink_ready = (videohdmi10to1serializer4_level < 4'd10);
assign videohdmi10to1serializer4_source_valid = (videohdmi10to1serializer4_level >= 2'd2);
assign videohdmi10to1serializer4_i_inc = (videohdmi10to1serializer4_sink_valid & videohdmi10to1serializer4_sink_ready);
assign videohdmi10to1serializer4_o_inc = (videohdmi10to1serializer4_source_valid & videohdmi10to1serializer4_source_ready);
assign videohdmi10to1serializer4_i_data = {videohdmi10to1serializer4_sink_payload_data[0], videohdmi10to1serializer4_sink_payload_data[1], videohdmi10to1serializer4_sink_payload_data[2], videohdmi10to1serializer4_sink_payload_data[3], videohdmi10to1serializer4_sink_payload_data[4], videohdmi10to1serializer4_sink_payload_data[5], videohdmi10to1serializer4_sink_payload_data[6], videohdmi10to1serializer4_sink_payload_data[7], videohdmi10to1serializer4_sink_payload_data[8], videohdmi10to1serializer4_sink_payload_data[9]};
always @(*) begin
    videohdmi10to1serializer4_o_data <= 2'd0;
    case (videohdmi10to1serializer4_o_count)
        1'd0: begin
            videohdmi10to1serializer4_o_data <= videohdmi10to1serializer4_shift_register[19:18];
        end
        1'd1: begin
            videohdmi10to1serializer4_o_data <= videohdmi10to1serializer4_shift_register[17:16];
        end
        2'd2: begin
            videohdmi10to1serializer4_o_data <= videohdmi10to1serializer4_shift_register[15:14];
        end
        2'd3: begin
            videohdmi10to1serializer4_o_data <= videohdmi10to1serializer4_shift_register[13:12];
        end
        3'd4: begin
            videohdmi10to1serializer4_o_data <= videohdmi10to1serializer4_shift_register[11:10];
        end
        3'd5: begin
            videohdmi10to1serializer4_o_data <= videohdmi10to1serializer4_shift_register[9:8];
        end
        3'd6: begin
            videohdmi10to1serializer4_o_data <= videohdmi10to1serializer4_shift_register[7:6];
        end
        3'd7: begin
            videohdmi10to1serializer4_o_data <= videohdmi10to1serializer4_shift_register[5:4];
        end
        4'd8: begin
            videohdmi10to1serializer4_o_data <= videohdmi10to1serializer4_shift_register[3:2];
        end
        4'd9: begin
            videohdmi10to1serializer4_o_data <= videohdmi10to1serializer4_shift_register[1:0];
        end
    endcase
end
assign videohdmi10to1serializer4_source_payload_data = {videohdmi10to1serializer4_o_data[0], videohdmi10to1serializer4_o_data[1]};
assign tmdsencoder5_q_m8_n = ((tmdsencoder5_n1d > 3'd4) | ((tmdsencoder5_n1d == 3'd4) & (~tmdsencoder5_d1[0])));
assign videohdmi10to1serializer5_sink_sink_valid = 1'd1;
assign videohdmi10to1serializer5_sink_sink_payload_data = (~tmdsencoder5_out);
assign videohdmi10to1serializer5_sink_valid = videohdmi10to1serializer5_source_source_valid;
assign videohdmi10to1serializer5_source_source_ready = videohdmi10to1serializer5_sink_ready;
assign videohdmi10to1serializer5_sink_first = videohdmi10to1serializer5_source_source_first;
assign videohdmi10to1serializer5_sink_last = videohdmi10to1serializer5_source_source_last;
assign videohdmi10to1serializer5_sink_payload_data = videohdmi10to1serializer5_source_source_payload_data;
assign videohdmi10to1serializer5_source_ready = 1'd1;
assign videohdmi10to1serializer5_cdc_sink_valid = videohdmi10to1serializer5_sink_sink_valid;
assign videohdmi10to1serializer5_sink_sink_ready = videohdmi10to1serializer5_cdc_sink_ready;
assign videohdmi10to1serializer5_cdc_sink_first = videohdmi10to1serializer5_sink_sink_first;
assign videohdmi10to1serializer5_cdc_sink_last = videohdmi10to1serializer5_sink_sink_last;
assign videohdmi10to1serializer5_cdc_sink_payload_data = videohdmi10to1serializer5_sink_sink_payload_data;
assign videohdmi10to1serializer5_source_source_valid = videohdmi10to1serializer5_cdc_source_valid;
assign videohdmi10to1serializer5_cdc_source_ready = videohdmi10to1serializer5_source_source_ready;
assign videohdmi10to1serializer5_source_source_first = videohdmi10to1serializer5_cdc_source_first;
assign videohdmi10to1serializer5_source_source_last = videohdmi10to1serializer5_cdc_source_last;
assign videohdmi10to1serializer5_source_source_payload_data = videohdmi10to1serializer5_cdc_source_payload_data;
assign videohdmi10to1serializer5_cdc_asyncfifo5_din = {videohdmi10to1serializer5_cdc_fifo_in_last, videohdmi10to1serializer5_cdc_fifo_in_first, videohdmi10to1serializer5_cdc_fifo_in_payload_data};
assign {videohdmi10to1serializer5_cdc_fifo_out_last, videohdmi10to1serializer5_cdc_fifo_out_first, videohdmi10to1serializer5_cdc_fifo_out_payload_data} = videohdmi10to1serializer5_cdc_asyncfifo5_dout;
assign {videohdmi10to1serializer5_cdc_fifo_out_last, videohdmi10to1serializer5_cdc_fifo_out_first, videohdmi10to1serializer5_cdc_fifo_out_payload_data} = videohdmi10to1serializer5_cdc_asyncfifo5_dout;
assign {videohdmi10to1serializer5_cdc_fifo_out_last, videohdmi10to1serializer5_cdc_fifo_out_first, videohdmi10to1serializer5_cdc_fifo_out_payload_data} = videohdmi10to1serializer5_cdc_asyncfifo5_dout;
assign videohdmi10to1serializer5_cdc_sink_ready = videohdmi10to1serializer5_cdc_asyncfifo5_writable;
assign videohdmi10to1serializer5_cdc_asyncfifo5_we = videohdmi10to1serializer5_cdc_sink_valid;
assign videohdmi10to1serializer5_cdc_fifo_in_first = videohdmi10to1serializer5_cdc_sink_first;
assign videohdmi10to1serializer5_cdc_fifo_in_last = videohdmi10to1serializer5_cdc_sink_last;
assign videohdmi10to1serializer5_cdc_fifo_in_payload_data = videohdmi10to1serializer5_cdc_sink_payload_data;
assign videohdmi10to1serializer5_cdc_source_valid = videohdmi10to1serializer5_cdc_asyncfifo5_readable;
assign videohdmi10to1serializer5_cdc_source_first = videohdmi10to1serializer5_cdc_fifo_out_first;
assign videohdmi10to1serializer5_cdc_source_last = videohdmi10to1serializer5_cdc_fifo_out_last;
assign videohdmi10to1serializer5_cdc_source_payload_data = videohdmi10to1serializer5_cdc_fifo_out_payload_data;
assign videohdmi10to1serializer5_cdc_asyncfifo5_re = videohdmi10to1serializer5_cdc_source_ready;
assign videohdmi10to1serializer5_cdc_graycounter10_ce = (videohdmi10to1serializer5_cdc_asyncfifo5_writable & videohdmi10to1serializer5_cdc_asyncfifo5_we);
assign videohdmi10to1serializer5_cdc_graycounter11_ce = (videohdmi10to1serializer5_cdc_asyncfifo5_readable & videohdmi10to1serializer5_cdc_asyncfifo5_re);
assign videohdmi10to1serializer5_cdc_asyncfifo5_writable = (((videohdmi10to1serializer5_cdc_graycounter10_q[2] == videohdmi10to1serializer5_cdc_consume_wdomain[2]) | (videohdmi10to1serializer5_cdc_graycounter10_q[1] == videohdmi10to1serializer5_cdc_consume_wdomain[1])) | (videohdmi10to1serializer5_cdc_graycounter10_q[0] != videohdmi10to1serializer5_cdc_consume_wdomain[0]));
assign videohdmi10to1serializer5_cdc_asyncfifo5_readable = (videohdmi10to1serializer5_cdc_graycounter11_q != videohdmi10to1serializer5_cdc_produce_rdomain);
assign videohdmi10to1serializer5_cdc_wrport_adr = videohdmi10to1serializer5_cdc_graycounter10_q_binary[1:0];
assign videohdmi10to1serializer5_cdc_wrport_dat_w = videohdmi10to1serializer5_cdc_asyncfifo5_din;
assign videohdmi10to1serializer5_cdc_wrport_we = videohdmi10to1serializer5_cdc_graycounter10_ce;
assign videohdmi10to1serializer5_cdc_rdport_adr = videohdmi10to1serializer5_cdc_graycounter11_q_next_binary[1:0];
assign videohdmi10to1serializer5_cdc_asyncfifo5_dout = videohdmi10to1serializer5_cdc_rdport_dat_r;
always @(*) begin
    videohdmi10to1serializer5_cdc_graycounter10_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer5_cdc_graycounter10_ce) begin
        videohdmi10to1serializer5_cdc_graycounter10_q_next_binary <= (videohdmi10to1serializer5_cdc_graycounter10_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer5_cdc_graycounter10_q_next_binary <= videohdmi10to1serializer5_cdc_graycounter10_q_binary;
    end
end
assign videohdmi10to1serializer5_cdc_graycounter10_q_next = (videohdmi10to1serializer5_cdc_graycounter10_q_next_binary ^ videohdmi10to1serializer5_cdc_graycounter10_q_next_binary[2:1]);
always @(*) begin
    videohdmi10to1serializer5_cdc_graycounter11_q_next_binary <= 3'd0;
    if (videohdmi10to1serializer5_cdc_graycounter11_ce) begin
        videohdmi10to1serializer5_cdc_graycounter11_q_next_binary <= (videohdmi10to1serializer5_cdc_graycounter11_q_binary + 1'd1);
    end else begin
        videohdmi10to1serializer5_cdc_graycounter11_q_next_binary <= videohdmi10to1serializer5_cdc_graycounter11_q_binary;
    end
end
assign videohdmi10to1serializer5_cdc_graycounter11_q_next = (videohdmi10to1serializer5_cdc_graycounter11_q_next_binary ^ videohdmi10to1serializer5_cdc_graycounter11_q_next_binary[2:1]);
assign videohdmi10to1serializer5_sink_ready = (videohdmi10to1serializer5_level < 4'd10);
assign videohdmi10to1serializer5_source_valid = (videohdmi10to1serializer5_level >= 2'd2);
assign videohdmi10to1serializer5_i_inc = (videohdmi10to1serializer5_sink_valid & videohdmi10to1serializer5_sink_ready);
assign videohdmi10to1serializer5_o_inc = (videohdmi10to1serializer5_source_valid & videohdmi10to1serializer5_source_ready);
assign videohdmi10to1serializer5_i_data = {videohdmi10to1serializer5_sink_payload_data[0], videohdmi10to1serializer5_sink_payload_data[1], videohdmi10to1serializer5_sink_payload_data[2], videohdmi10to1serializer5_sink_payload_data[3], videohdmi10to1serializer5_sink_payload_data[4], videohdmi10to1serializer5_sink_payload_data[5], videohdmi10to1serializer5_sink_payload_data[6], videohdmi10to1serializer5_sink_payload_data[7], videohdmi10to1serializer5_sink_payload_data[8], videohdmi10to1serializer5_sink_payload_data[9]};
always @(*) begin
    videohdmi10to1serializer5_o_data <= 2'd0;
    case (videohdmi10to1serializer5_o_count)
        1'd0: begin
            videohdmi10to1serializer5_o_data <= videohdmi10to1serializer5_shift_register[19:18];
        end
        1'd1: begin
            videohdmi10to1serializer5_o_data <= videohdmi10to1serializer5_shift_register[17:16];
        end
        2'd2: begin
            videohdmi10to1serializer5_o_data <= videohdmi10to1serializer5_shift_register[15:14];
        end
        2'd3: begin
            videohdmi10to1serializer5_o_data <= videohdmi10to1serializer5_shift_register[13:12];
        end
        3'd4: begin
            videohdmi10to1serializer5_o_data <= videohdmi10to1serializer5_shift_register[11:10];
        end
        3'd5: begin
            videohdmi10to1serializer5_o_data <= videohdmi10to1serializer5_shift_register[9:8];
        end
        3'd6: begin
            videohdmi10to1serializer5_o_data <= videohdmi10to1serializer5_shift_register[7:6];
        end
        3'd7: begin
            videohdmi10to1serializer5_o_data <= videohdmi10to1serializer5_shift_register[5:4];
        end
        4'd8: begin
            videohdmi10to1serializer5_o_data <= videohdmi10to1serializer5_shift_register[3:2];
        end
        4'd9: begin
            videohdmi10to1serializer5_o_data <= videohdmi10to1serializer5_shift_register[1:0];
        end
    endcase
end
assign videohdmi10to1serializer5_source_payload_data = {videohdmi10to1serializer5_o_data[0], videohdmi10to1serializer5_o_data[1]};
assign vtg_reset = (~vtg_enable);
assign vtg_source_payload_de = (vtg_hactive & vtg_vactive);
always @(*) begin
    clockdomainsrenamer_next_state <= 1'd0;
    clockdomainsrenamer_next_state <= clockdomainsrenamer_state;
    case (clockdomainsrenamer_state)
        1'd1: begin
        end
        default: begin
            clockdomainsrenamer_next_state <= 1'd1;
        end
    endcase
end
always @(*) begin
    vtg_source_payload_hsync_clockdomainsrenamer_next_value6 <= 1'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
            if (vtg_source_ready) begin
                if ((vtg_source_payload_hcount == vtg_hsync_start)) begin
                    vtg_source_payload_hsync_clockdomainsrenamer_next_value6 <= 1'd1;
                end
                if ((vtg_source_payload_hcount == vtg_hsync_end)) begin
                    vtg_source_payload_hsync_clockdomainsrenamer_next_value6 <= 1'd0;
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    vtg_source_payload_hres_clockdomainsrenamer_next_value2 <= 12'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
        end
        default: begin
            vtg_source_payload_hres_clockdomainsrenamer_next_value2 <= vtg_hres;
        end
    endcase
end
always @(*) begin
    vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6 <= 1'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
            if (vtg_source_ready) begin
                if ((vtg_source_payload_hcount == vtg_hsync_start)) begin
                    vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6 <= 1'd1;
                end
                if ((vtg_source_payload_hcount == vtg_hsync_end)) begin
                    vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6 <= 1'd1;
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    vtg_source_payload_hres_clockdomainsrenamer_next_value_ce2 <= 1'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
        end
        default: begin
            vtg_source_payload_hres_clockdomainsrenamer_next_value_ce2 <= 1'd1;
        end
    endcase
end
always @(*) begin
    vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7 <= 1'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
            if (vtg_source_ready) begin
                if ((vtg_source_payload_hcount == vtg_hsync_start)) begin
                    if ((vtg_source_payload_vcount == vtg_vsync_start)) begin
                        vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7 <= 1'd1;
                    end
                    if ((vtg_source_payload_vcount == vtg_vsync_end)) begin
                        vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7 <= 1'd1;
                    end
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    vtg_source_payload_vres_clockdomainsrenamer_next_value3 <= 12'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
        end
        default: begin
            vtg_source_payload_vres_clockdomainsrenamer_next_value3 <= vtg_vres;
        end
    endcase
end
always @(*) begin
    vtg_source_payload_vres_clockdomainsrenamer_next_value_ce3 <= 1'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
        end
        default: begin
            vtg_source_payload_vres_clockdomainsrenamer_next_value_ce3 <= 1'd1;
        end
    endcase
end
always @(*) begin
    vtg_source_payload_hcount_clockdomainsrenamer_next_value4 <= 12'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
            if (vtg_source_ready) begin
                vtg_source_payload_hcount_clockdomainsrenamer_next_value4 <= (vtg_source_payload_hcount + 1'd1);
                if ((vtg_source_payload_hcount == vtg_hscan)) begin
                    vtg_source_payload_hcount_clockdomainsrenamer_next_value4 <= 1'd0;
                end
            end
        end
        default: begin
            vtg_source_payload_hcount_clockdomainsrenamer_next_value4 <= 1'd0;
        end
    endcase
end
always @(*) begin
    vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 <= 1'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
            if (vtg_source_ready) begin
                vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 <= 1'd1;
                if ((vtg_source_payload_hcount == vtg_hscan)) begin
                    vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 <= 1'd1;
                end
            end
        end
        default: begin
            vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 <= 1'd1;
        end
    endcase
end
always @(*) begin
    vtg_source_payload_vcount_clockdomainsrenamer_next_value5 <= 12'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
            if (vtg_source_ready) begin
                if ((vtg_source_payload_hcount == vtg_hsync_start)) begin
                    vtg_source_payload_vcount_clockdomainsrenamer_next_value5 <= (vtg_source_payload_vcount + 1'd1);
                    if ((vtg_source_payload_vcount == vtg_vscan)) begin
                        vtg_source_payload_vcount_clockdomainsrenamer_next_value5 <= 1'd0;
                    end
                end
            end
        end
        default: begin
            vtg_source_payload_vcount_clockdomainsrenamer_next_value5 <= 1'd0;
        end
    endcase
end
always @(*) begin
    vtg_source_valid <= 1'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
            vtg_source_valid <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 <= 1'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
            if (vtg_source_ready) begin
                if ((vtg_source_payload_hcount == vtg_hsync_start)) begin
                    vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 <= 1'd1;
                    if ((vtg_source_payload_vcount == vtg_vscan)) begin
                        vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 <= 1'd1;
                    end
                end
            end
        end
        default: begin
            vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 <= 1'd1;
        end
    endcase
end
always @(*) begin
    vtg_hactive_clockdomainsrenamer_next_value0 <= 1'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
            if (vtg_source_ready) begin
                if ((vtg_source_payload_hcount == 1'd0)) begin
                    vtg_hactive_clockdomainsrenamer_next_value0 <= 1'd1;
                end
                if ((vtg_source_payload_hcount == vtg_hres)) begin
                    vtg_hactive_clockdomainsrenamer_next_value0 <= 1'd0;
                end
            end
        end
        default: begin
            vtg_hactive_clockdomainsrenamer_next_value0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    vtg_hactive_clockdomainsrenamer_next_value_ce0 <= 1'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
            if (vtg_source_ready) begin
                if ((vtg_source_payload_hcount == 1'd0)) begin
                    vtg_hactive_clockdomainsrenamer_next_value_ce0 <= 1'd1;
                end
                if ((vtg_source_payload_hcount == vtg_hres)) begin
                    vtg_hactive_clockdomainsrenamer_next_value_ce0 <= 1'd1;
                end
            end
        end
        default: begin
            vtg_hactive_clockdomainsrenamer_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    vtg_source_payload_vsync_clockdomainsrenamer_next_value7 <= 1'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
            if (vtg_source_ready) begin
                if ((vtg_source_payload_hcount == vtg_hsync_start)) begin
                    if ((vtg_source_payload_vcount == vtg_vsync_start)) begin
                        vtg_source_payload_vsync_clockdomainsrenamer_next_value7 <= 1'd1;
                    end
                    if ((vtg_source_payload_vcount == vtg_vsync_end)) begin
                        vtg_source_payload_vsync_clockdomainsrenamer_next_value7 <= 1'd0;
                    end
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    vtg_vactive_clockdomainsrenamer_next_value1 <= 1'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
            if (vtg_source_ready) begin
                if ((vtg_source_payload_hcount == vtg_hsync_start)) begin
                    if ((vtg_source_payload_vcount == 1'd0)) begin
                        vtg_vactive_clockdomainsrenamer_next_value1 <= 1'd1;
                    end
                    if ((vtg_source_payload_vcount == vtg_vres)) begin
                        vtg_vactive_clockdomainsrenamer_next_value1 <= 1'd0;
                    end
                end
            end
        end
        default: begin
            vtg_vactive_clockdomainsrenamer_next_value1 <= 1'd0;
        end
    endcase
end
always @(*) begin
    vtg_vactive_clockdomainsrenamer_next_value_ce1 <= 1'd0;
    case (clockdomainsrenamer_state)
        1'd1: begin
            if (vtg_source_ready) begin
                if ((vtg_source_payload_hcount == vtg_hsync_start)) begin
                    if ((vtg_source_payload_vcount == 1'd0)) begin
                        vtg_vactive_clockdomainsrenamer_next_value_ce1 <= 1'd1;
                    end
                    if ((vtg_source_payload_vcount == vtg_vres)) begin
                        vtg_vactive_clockdomainsrenamer_next_value_ce1 <= 1'd1;
                    end
                end
            end
        end
        default: begin
            vtg_vactive_clockdomainsrenamer_next_value_ce1 <= 1'd1;
        end
    endcase
end
assign vfb_conv_converter_sink_valid = vfb_dma_source_valid;
assign vfb_dma_source_ready = vfb_conv_converter_sink_ready;
assign vfb_conv_converter_sink_first = vfb_dma_source_first;
assign vfb_conv_converter_sink_last = vfb_dma_source_last;
assign vfb_conv_converter_sink_payload_data = vfb_dma_source_payload_data;
assign vfb_cdc_sink_sink_valid = vfb_conv_source_source_valid;
assign vfb_conv_source_source_ready = vfb_cdc_sink_sink_ready;
assign vfb_cdc_sink_sink_first = vfb_conv_source_source_first;
assign vfb_cdc_sink_sink_last = vfb_conv_source_source_last;
assign vfb_cdc_sink_sink_payload_data = vfb_conv_source_source_payload_data;
assign vfb_source_payload_r = vfb_cdc_source_source_payload_data[7:0];
assign vfb_source_payload_g = vfb_cdc_source_source_payload_data[15:8];
assign vfb_source_payload_b = vfb_cdc_source_source_payload_data[23:16];
assign vfb_underflow = (~vfb_source_valid);
assign vfb_conv_source_source_valid = vfb_conv_converter_source_valid;
assign vfb_conv_converter_source_ready = vfb_conv_source_source_ready;
assign vfb_conv_source_source_first = vfb_conv_converter_source_first;
assign vfb_conv_source_source_last = vfb_conv_converter_source_last;
assign vfb_conv_source_source_payload_data = vfb_conv_converter_source_payload_data;
assign vfb_conv_converter_source_valid = vfb_conv_converter_sink_valid;
assign vfb_conv_converter_sink_ready = vfb_conv_converter_source_ready;
assign vfb_conv_converter_source_first = vfb_conv_converter_sink_first;
assign vfb_conv_converter_source_last = vfb_conv_converter_sink_last;
assign vfb_conv_converter_source_payload_data = vfb_conv_converter_sink_payload_data;
assign vfb_conv_converter_source_payload_valid_token_count = 1'd1;
assign vfb_cdc_cdc_sink_valid = vfb_cdc_sink_sink_valid;
assign vfb_cdc_sink_sink_ready = vfb_cdc_cdc_sink_ready;
assign vfb_cdc_cdc_sink_first = vfb_cdc_sink_sink_first;
assign vfb_cdc_cdc_sink_last = vfb_cdc_sink_sink_last;
assign vfb_cdc_cdc_sink_payload_data = vfb_cdc_sink_sink_payload_data;
assign vfb_cdc_source_source_valid = vfb_cdc_cdc_source_valid;
assign vfb_cdc_cdc_source_ready = vfb_cdc_source_source_ready;
assign vfb_cdc_source_source_first = vfb_cdc_cdc_source_first;
assign vfb_cdc_source_source_last = vfb_cdc_cdc_source_last;
assign vfb_cdc_source_source_payload_data = vfb_cdc_cdc_source_payload_data;
assign vfb_cdc_cdc_asyncfifo_din = {vfb_cdc_cdc_fifo_in_last, vfb_cdc_cdc_fifo_in_first, vfb_cdc_cdc_fifo_in_payload_data};
assign {vfb_cdc_cdc_fifo_out_last, vfb_cdc_cdc_fifo_out_first, vfb_cdc_cdc_fifo_out_payload_data} = vfb_cdc_cdc_asyncfifo_dout;
assign {vfb_cdc_cdc_fifo_out_last, vfb_cdc_cdc_fifo_out_first, vfb_cdc_cdc_fifo_out_payload_data} = vfb_cdc_cdc_asyncfifo_dout;
assign {vfb_cdc_cdc_fifo_out_last, vfb_cdc_cdc_fifo_out_first, vfb_cdc_cdc_fifo_out_payload_data} = vfb_cdc_cdc_asyncfifo_dout;
assign vfb_cdc_cdc_sink_ready = vfb_cdc_cdc_asyncfifo_writable;
assign vfb_cdc_cdc_asyncfifo_we = vfb_cdc_cdc_sink_valid;
assign vfb_cdc_cdc_fifo_in_first = vfb_cdc_cdc_sink_first;
assign vfb_cdc_cdc_fifo_in_last = vfb_cdc_cdc_sink_last;
assign vfb_cdc_cdc_fifo_in_payload_data = vfb_cdc_cdc_sink_payload_data;
assign vfb_cdc_cdc_source_valid = vfb_cdc_cdc_asyncfifo_readable;
assign vfb_cdc_cdc_source_first = vfb_cdc_cdc_fifo_out_first;
assign vfb_cdc_cdc_source_last = vfb_cdc_cdc_fifo_out_last;
assign vfb_cdc_cdc_source_payload_data = vfb_cdc_cdc_fifo_out_payload_data;
assign vfb_cdc_cdc_asyncfifo_re = vfb_cdc_cdc_source_ready;
assign vfb_cdc_cdc_graycounter0_ce = (vfb_cdc_cdc_asyncfifo_writable & vfb_cdc_cdc_asyncfifo_we);
assign vfb_cdc_cdc_graycounter1_ce = (vfb_cdc_cdc_asyncfifo_readable & vfb_cdc_cdc_asyncfifo_re);
assign vfb_cdc_cdc_asyncfifo_writable = (((vfb_cdc_cdc_graycounter0_q[2] == vfb_cdc_cdc_consume_wdomain[2]) | (vfb_cdc_cdc_graycounter0_q[1] == vfb_cdc_cdc_consume_wdomain[1])) | (vfb_cdc_cdc_graycounter0_q[0] != vfb_cdc_cdc_consume_wdomain[0]));
assign vfb_cdc_cdc_asyncfifo_readable = (vfb_cdc_cdc_graycounter1_q != vfb_cdc_cdc_produce_rdomain);
assign vfb_cdc_cdc_wrport_adr = vfb_cdc_cdc_graycounter0_q_binary[1:0];
assign vfb_cdc_cdc_wrport_dat_w = vfb_cdc_cdc_asyncfifo_din;
assign vfb_cdc_cdc_wrport_we = vfb_cdc_cdc_graycounter0_ce;
assign vfb_cdc_cdc_rdport_adr = vfb_cdc_cdc_graycounter1_q_next_binary[1:0];
assign vfb_cdc_cdc_asyncfifo_dout = vfb_cdc_cdc_rdport_dat_r;
always @(*) begin
    vfb_cdc_cdc_graycounter0_q_next_binary <= 3'd0;
    if (vfb_cdc_cdc_graycounter0_ce) begin
        vfb_cdc_cdc_graycounter0_q_next_binary <= (vfb_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        vfb_cdc_cdc_graycounter0_q_next_binary <= vfb_cdc_cdc_graycounter0_q_binary;
    end
end
assign vfb_cdc_cdc_graycounter0_q_next = (vfb_cdc_cdc_graycounter0_q_next_binary ^ vfb_cdc_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
    vfb_cdc_cdc_graycounter1_q_next_binary <= 3'd0;
    if (vfb_cdc_cdc_graycounter1_ce) begin
        vfb_cdc_cdc_graycounter1_q_next_binary <= (vfb_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        vfb_cdc_cdc_graycounter1_q_next_binary <= vfb_cdc_cdc_graycounter1_q_binary;
    end
end
assign vfb_cdc_cdc_graycounter1_q_next = (vfb_cdc_cdc_graycounter1_q_next_binary ^ vfb_cdc_cdc_graycounter1_q_next_binary[2:1]);
always @(*) begin
    videoframebuffer_next_state <= 1'd0;
    videoframebuffer_next_state <= videoframebuffer_state;
    case (videoframebuffer_state)
        1'd1: begin
            if ((vfb_vtg_sink_valid & vfb_vtg_sink_payload_de)) begin
                if ((vfb_cdc_source_source_valid & vfb_cdc_source_source_last)) begin
                    videoframebuffer_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if ((vfb_vtg_sink_valid & vfb_vtg_sink_last)) begin
                videoframebuffer_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    vfb_source_payload_hsync <= 1'd0;
    case (videoframebuffer_state)
        1'd1: begin
            vfb_source_payload_hsync <= vfb_vtg_sink_payload_hsync;
        end
        default: begin
            vfb_source_payload_hsync <= vfb_vtg_sink_payload_hsync;
        end
    endcase
end
always @(*) begin
    vfb_source_payload_vsync <= 1'd0;
    case (videoframebuffer_state)
        1'd1: begin
            vfb_source_payload_vsync <= vfb_vtg_sink_payload_vsync;
        end
        default: begin
            vfb_source_payload_vsync <= vfb_vtg_sink_payload_vsync;
        end
    endcase
end
always @(*) begin
    vfb_vtg_sink_ready <= 1'd0;
    case (videoframebuffer_state)
        1'd1: begin
            vfb_vtg_sink_ready <= 1'd1;
            if ((vfb_vtg_sink_valid & vfb_vtg_sink_payload_de)) begin
                vfb_vtg_sink_ready <= (vfb_source_valid & vfb_source_ready);
            end
        end
        default: begin
            vfb_vtg_sink_ready <= 1'd1;
            if (vfb_reset) begin
                vfb_vtg_sink_ready <= 1'd0;
            end
        end
    endcase
end
always @(*) begin
    vfb_source_payload_de <= 1'd0;
    case (videoframebuffer_state)
        1'd1: begin
            vfb_source_payload_de <= vfb_vtg_sink_payload_de;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    vfb_first_videoframebuffer_next_value <= 1'd0;
    case (videoframebuffer_state)
        1'd1: begin
            if ((vfb_vtg_sink_valid & vfb_vtg_sink_payload_de)) begin
                if ((vfb_cdc_source_source_valid & vfb_cdc_source_source_last)) begin
                    vfb_first_videoframebuffer_next_value <= 1'd0;
                end
            end
        end
        default: begin
            if (vfb_reset) begin
                vfb_first_videoframebuffer_next_value <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    vfb_cdc_source_source_ready <= 1'd0;
    case (videoframebuffer_state)
        1'd1: begin
            if ((vfb_vtg_sink_valid & vfb_vtg_sink_payload_de)) begin
                vfb_cdc_source_source_ready <= vfb_source_ready;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    vfb_first_videoframebuffer_next_value_ce <= 1'd0;
    case (videoframebuffer_state)
        1'd1: begin
            if ((vfb_vtg_sink_valid & vfb_vtg_sink_payload_de)) begin
                if ((vfb_cdc_source_source_valid & vfb_cdc_source_source_last)) begin
                    vfb_first_videoframebuffer_next_value_ce <= 1'd1;
                end
            end
        end
        default: begin
            if (vfb_reset) begin
                vfb_first_videoframebuffer_next_value_ce <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    vfb_source_valid <= 1'd0;
    case (videoframebuffer_state)
        1'd1: begin
            if ((vfb_vtg_sink_valid & vfb_vtg_sink_payload_de)) begin
                vfb_source_valid <= vfb_cdc_source_source_valid;
                if (vfb_first) begin
                    vfb_source_valid <= 1'd0;
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    wishbone2csr_next_state <= 1'd0;
    wishbone2csr_next_state <= wishbone2csr_state;
    case (wishbone2csr_state)
        1'd1: begin
            wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    interface0_ack <= 1'd0;
    case (wishbone2csr_state)
        1'd1: begin
            interface0_ack <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    interface1_adr <= 14'd0;
    case (wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                interface1_adr <= interface0_adr[29:0];
            end
        end
    endcase
end
always @(*) begin
    interface1_we <= 1'd0;
    case (wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                interface1_we <= (interface0_we & (interface0_sel != 1'd0));
            end
        end
    endcase
end
always @(*) begin
    interface1_dat_w <= 32'd0;
    case (wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            interface1_dat_w <= interface0_dat_w;
        end
    endcase
end
always @(*) begin
    interface0_dat_r <= 32'd0;
    case (wishbone2csr_state)
        1'd1: begin
            interface0_dat_r <= interface1_dat_r;
        end
        default: begin
        end
    endcase
end
assign sel = (bank_bus_adr[13:9] == 1'd0);
assign enable0_r = bank_bus_dat_w[0];
always @(*) begin
    enable0_re <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 1'd0))) begin
        enable0_re <= bank_bus_we;
    end
end
always @(*) begin
    enable0_we <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 1'd0))) begin
        enable0_we <= (~bank_bus_we);
    end
end
assign hres0_r = bank_bus_dat_w[11:0];
always @(*) begin
    hres0_we <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 1'd1))) begin
        hres0_we <= (~bank_bus_we);
    end
end
always @(*) begin
    hres0_re <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 1'd1))) begin
        hres0_re <= bank_bus_we;
    end
end
assign hsync_start0_r = bank_bus_dat_w[11:0];
always @(*) begin
    hsync_start0_re <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 2'd2))) begin
        hsync_start0_re <= bank_bus_we;
    end
end
always @(*) begin
    hsync_start0_we <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 2'd2))) begin
        hsync_start0_we <= (~bank_bus_we);
    end
end
assign hsync_end0_r = bank_bus_dat_w[11:0];
always @(*) begin
    hsync_end0_we <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 2'd3))) begin
        hsync_end0_we <= (~bank_bus_we);
    end
end
always @(*) begin
    hsync_end0_re <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 2'd3))) begin
        hsync_end0_re <= bank_bus_we;
    end
end
assign hscan0_r = bank_bus_dat_w[11:0];
always @(*) begin
    hscan0_we <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 3'd4))) begin
        hscan0_we <= (~bank_bus_we);
    end
end
always @(*) begin
    hscan0_re <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 3'd4))) begin
        hscan0_re <= bank_bus_we;
    end
end
assign vres0_r = bank_bus_dat_w[11:0];
always @(*) begin
    vres0_re <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 3'd5))) begin
        vres0_re <= bank_bus_we;
    end
end
always @(*) begin
    vres0_we <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 3'd5))) begin
        vres0_we <= (~bank_bus_we);
    end
end
assign vsync_start0_r = bank_bus_dat_w[11:0];
always @(*) begin
    vsync_start0_we <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 3'd6))) begin
        vsync_start0_we <= (~bank_bus_we);
    end
end
always @(*) begin
    vsync_start0_re <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 3'd6))) begin
        vsync_start0_re <= bank_bus_we;
    end
end
assign vsync_end0_r = bank_bus_dat_w[11:0];
always @(*) begin
    vsync_end0_re <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 3'd7))) begin
        vsync_end0_re <= bank_bus_we;
    end
end
always @(*) begin
    vsync_end0_we <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 3'd7))) begin
        vsync_end0_we <= (~bank_bus_we);
    end
end
assign vscan0_r = bank_bus_dat_w[11:0];
always @(*) begin
    vscan0_re <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 4'd8))) begin
        vscan0_re <= bank_bus_we;
    end
end
always @(*) begin
    vscan0_we <= 1'd0;
    if ((sel & (bank_bus_adr[8:0] == 4'd8))) begin
        vscan0_we <= (~bank_bus_we);
    end
end
assign enable0_w = vtg_enable_storage;
assign hres0_w = vtg_hres_storage[11:0];
assign hsync_start0_w = vtg_hsync_start_storage[11:0];
assign hsync_end0_w = vtg_hsync_end_storage[11:0];
assign hscan0_w = vtg_hscan_storage[11:0];
assign vres0_w = vtg_vres_storage[11:0];
assign vsync_start0_w = vtg_vsync_start_storage[11:0];
assign vsync_end0_w = vtg_vsync_end_storage[11:0];
assign vscan0_w = vtg_vscan_storage[11:0];
assign adr = interface1_adr;
assign we = interface1_we;
assign dat_w = interface1_dat_w;
assign interface1_dat_r = dat_r;
assign bank_bus_adr = adr;
assign bank_bus_we = we;
assign bank_bus_dat_w = dat_w;
assign dat_r = bank_bus_dat_r;
always @(*) begin
    self0 <= 10'd0;
    case (tmdsencoder0_new_c2)
        1'd0: begin
            self0 <= 10'd852;
        end
        1'd1: begin
            self0 <= 8'd171;
        end
        2'd2: begin
            self0 <= 9'd340;
        end
        default: begin
            self0 <= 10'd683;
        end
    endcase
end
always @(*) begin
    self1 <= 10'd0;
    case (tmdsencoder1_new_c2)
        1'd0: begin
            self1 <= 10'd852;
        end
        1'd1: begin
            self1 <= 8'd171;
        end
        2'd2: begin
            self1 <= 9'd340;
        end
        default: begin
            self1 <= 10'd683;
        end
    endcase
end
always @(*) begin
    self2 <= 10'd0;
    case (tmdsencoder2_new_c2)
        1'd0: begin
            self2 <= 10'd852;
        end
        1'd1: begin
            self2 <= 8'd171;
        end
        2'd2: begin
            self2 <= 9'd340;
        end
        default: begin
            self2 <= 10'd683;
        end
    endcase
end
always @(*) begin
    self3 <= 10'd0;
    case (tmdsencoder3_new_c2)
        1'd0: begin
            self3 <= 10'd852;
        end
        1'd1: begin
            self3 <= 8'd171;
        end
        2'd2: begin
            self3 <= 9'd340;
        end
        default: begin
            self3 <= 10'd683;
        end
    endcase
end
always @(*) begin
    self4 <= 10'd0;
    case (tmdsencoder4_new_c2)
        1'd0: begin
            self4 <= 10'd852;
        end
        1'd1: begin
            self4 <= 8'd171;
        end
        2'd2: begin
            self4 <= 9'd340;
        end
        default: begin
            self4 <= 10'd683;
        end
    endcase
end
always @(*) begin
    self5 <= 10'd0;
    case (tmdsencoder5_new_c2)
        1'd0: begin
            self5 <= 10'd852;
        end
        1'd1: begin
            self5 <= 8'd171;
        end
        2'd2: begin
            self5 <= 9'd340;
        end
        default: begin
            self5 <= 10'd683;
        end
    endcase
end
assign videohdmi10to1serializer0_cdc_produce_rdomain = multiregimpl0_regs1;
assign videohdmi10to1serializer0_cdc_consume_wdomain = multiregimpl1_regs1;
assign videohdmi10to1serializer1_cdc_produce_rdomain = multiregimpl2_regs1;
assign videohdmi10to1serializer1_cdc_consume_wdomain = multiregimpl3_regs1;
assign videohdmi10to1serializer2_cdc_produce_rdomain = multiregimpl4_regs1;
assign videohdmi10to1serializer2_cdc_consume_wdomain = multiregimpl5_regs1;
assign videohdmi10to1serializer3_cdc_produce_rdomain = multiregimpl6_regs1;
assign videohdmi10to1serializer3_cdc_consume_wdomain = multiregimpl7_regs1;
assign videohdmi10to1serializer4_cdc_produce_rdomain = multiregimpl8_regs1;
assign videohdmi10to1serializer4_cdc_consume_wdomain = multiregimpl9_regs1;
assign videohdmi10to1serializer5_cdc_produce_rdomain = multiregimpl10_regs1;
assign videohdmi10to1serializer5_cdc_consume_wdomain = multiregimpl11_regs1;
assign vtg_enable = multiregimpl12_regs1;
assign vtg_hres = multiregimpl13_regs1;
assign vtg_hsync_start = multiregimpl14_regs1;
assign vtg_hsync_end = multiregimpl15_regs1;
assign vtg_hscan = multiregimpl16_regs1;
assign vtg_vres = multiregimpl17_regs1;
assign vtg_vsync_start = multiregimpl18_regs1;
assign vtg_vsync_end = multiregimpl19_regs1;
assign vtg_vscan = multiregimpl20_regs1;
assign vfb_cdc_cdc_produce_rdomain = multiregimpl21_regs1;
assign vfb_cdc_cdc_consume_wdomain = multiregimpl22_regs1;
assign vfb_reset = multiregimpl23_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge hdmi_clk) begin
    tmdsencoder0_n1d <= (((((((tmdsencoder0_d0[0] + tmdsencoder0_d0[1]) + tmdsencoder0_d0[2]) + tmdsencoder0_d0[3]) + tmdsencoder0_d0[4]) + tmdsencoder0_d0[5]) + tmdsencoder0_d0[6]) + tmdsencoder0_d0[7]);
    tmdsencoder0_d1 <= tmdsencoder0_d0;
    tmdsencoder0_self[0] <= tmdsencoder0_d1[0];
    tmdsencoder0_self[1] <= ((tmdsencoder0_d1[0] ^ tmdsencoder0_d1[1]) ^ tmdsencoder0_q_m8_n);
    tmdsencoder0_self[2] <= ((((tmdsencoder0_d1[0] ^ tmdsencoder0_d1[1]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[2]) ^ tmdsencoder0_q_m8_n);
    tmdsencoder0_self[3] <= ((((((tmdsencoder0_d1[0] ^ tmdsencoder0_d1[1]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[2]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[3]) ^ tmdsencoder0_q_m8_n);
    tmdsencoder0_self[4] <= ((((((((tmdsencoder0_d1[0] ^ tmdsencoder0_d1[1]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[2]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[3]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[4]) ^ tmdsencoder0_q_m8_n);
    tmdsencoder0_self[5] <= ((((((((((tmdsencoder0_d1[0] ^ tmdsencoder0_d1[1]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[2]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[3]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[4]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[5]) ^ tmdsencoder0_q_m8_n);
    tmdsencoder0_self[6] <= ((((((((((((tmdsencoder0_d1[0] ^ tmdsencoder0_d1[1]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[2]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[3]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[4]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[5]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[6]) ^ tmdsencoder0_q_m8_n);
    tmdsencoder0_self[7] <= ((((((((((((((tmdsencoder0_d1[0] ^ tmdsencoder0_d1[1]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[2]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[3]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[4]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[5]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[6]) ^ tmdsencoder0_q_m8_n) ^ tmdsencoder0_d1[7]) ^ tmdsencoder0_q_m8_n);
    tmdsencoder0_self[8] <= (~tmdsencoder0_q_m8_n);
    tmdsencoder0_n0q_m <= ((((((((~tmdsencoder0_self[0]) + (~tmdsencoder0_self[1])) + (~tmdsencoder0_self[2])) + (~tmdsencoder0_self[3])) + (~tmdsencoder0_self[4])) + (~tmdsencoder0_self[5])) + (~tmdsencoder0_self[6])) + (~tmdsencoder0_self[7]));
    tmdsencoder0_n1q_m <= (((((((tmdsencoder0_self[0] + tmdsencoder0_self[1]) + tmdsencoder0_self[2]) + tmdsencoder0_self[3]) + tmdsencoder0_self[4]) + tmdsencoder0_self[5]) + tmdsencoder0_self[6]) + tmdsencoder0_self[7]);
    tmdsencoder0_q_m_r <= tmdsencoder0_self;
    tmdsencoder0_new_c0 <= tmdsencoder0_c;
    tmdsencoder0_new_de0 <= tmdsencoder0_de;
    tmdsencoder0_new_c1 <= tmdsencoder0_new_c0;
    tmdsencoder0_new_de1 <= tmdsencoder0_new_de0;
    tmdsencoder0_new_c2 <= tmdsencoder0_new_c1;
    tmdsencoder0_new_de2 <= tmdsencoder0_new_de1;
    if (tmdsencoder0_new_de2) begin
        if (((tmdsencoder0_cnt == $signed({1'd0, 1'd0})) | $signed({1'd0, (tmdsencoder0_n1q_m == tmdsencoder0_n0q_m)}))) begin
            tmdsencoder0_out[9] <= (~tmdsencoder0_q_m_r[8]);
            tmdsencoder0_out[8] <= tmdsencoder0_q_m_r[8];
            if (tmdsencoder0_q_m_r[8]) begin
                tmdsencoder0_out[7:0] <= tmdsencoder0_q_m_r[7:0];
                tmdsencoder0_cnt <= ((tmdsencoder0_cnt + $signed({1'd0, tmdsencoder0_n1q_m})) - $signed({1'd0, tmdsencoder0_n0q_m}));
            end else begin
                tmdsencoder0_out[7:0] <= (~tmdsencoder0_q_m_r[7:0]);
                tmdsencoder0_cnt <= ((tmdsencoder0_cnt + $signed({1'd0, tmdsencoder0_n0q_m})) - $signed({1'd0, tmdsencoder0_n1q_m}));
            end
        end else begin
            if ((((~tmdsencoder0_cnt[5]) & $signed({1'd0, (tmdsencoder0_n1q_m > tmdsencoder0_n0q_m)})) | (tmdsencoder0_cnt[5] & $signed({1'd0, (tmdsencoder0_n0q_m > tmdsencoder0_n1q_m)})))) begin
                tmdsencoder0_out[9] <= 1'd1;
                tmdsencoder0_out[8] <= tmdsencoder0_q_m_r[8];
                tmdsencoder0_out[7:0] <= (~tmdsencoder0_q_m_r[7:0]);
                tmdsencoder0_cnt <= (((tmdsencoder0_cnt + $signed({1'd0, {tmdsencoder0_q_m_r[8], 1'd0}})) + $signed({1'd0, tmdsencoder0_n0q_m})) - $signed({1'd0, tmdsencoder0_n1q_m}));
            end else begin
                tmdsencoder0_out[9] <= 1'd0;
                tmdsencoder0_out[8] <= tmdsencoder0_q_m_r[8];
                tmdsencoder0_out[7:0] <= tmdsencoder0_q_m_r[7:0];
                tmdsencoder0_cnt <= (((tmdsencoder0_cnt - $signed({1'd0, {(~tmdsencoder0_q_m_r[8]), 1'd0}})) + $signed({1'd0, tmdsencoder0_n1q_m})) - $signed({1'd0, tmdsencoder0_n0q_m}));
            end
        end
    end else begin
        tmdsencoder0_out <= self0;
        tmdsencoder0_cnt <= 1'd0;
    end
    videohdmi10to1serializer0_cdc_graycounter0_q_binary <= videohdmi10to1serializer0_cdc_graycounter0_q_next_binary;
    videohdmi10to1serializer0_cdc_graycounter0_q <= videohdmi10to1serializer0_cdc_graycounter0_q_next;
    tmdsencoder1_n1d <= (((((((tmdsencoder1_d0[0] + tmdsencoder1_d0[1]) + tmdsencoder1_d0[2]) + tmdsencoder1_d0[3]) + tmdsencoder1_d0[4]) + tmdsencoder1_d0[5]) + tmdsencoder1_d0[6]) + tmdsencoder1_d0[7]);
    tmdsencoder1_d1 <= tmdsencoder1_d0;
    tmdsencoder1_self[0] <= tmdsencoder1_d1[0];
    tmdsencoder1_self[1] <= ((tmdsencoder1_d1[0] ^ tmdsencoder1_d1[1]) ^ tmdsencoder1_q_m8_n);
    tmdsencoder1_self[2] <= ((((tmdsencoder1_d1[0] ^ tmdsencoder1_d1[1]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[2]) ^ tmdsencoder1_q_m8_n);
    tmdsencoder1_self[3] <= ((((((tmdsencoder1_d1[0] ^ tmdsencoder1_d1[1]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[2]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[3]) ^ tmdsencoder1_q_m8_n);
    tmdsencoder1_self[4] <= ((((((((tmdsencoder1_d1[0] ^ tmdsencoder1_d1[1]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[2]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[3]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[4]) ^ tmdsencoder1_q_m8_n);
    tmdsencoder1_self[5] <= ((((((((((tmdsencoder1_d1[0] ^ tmdsencoder1_d1[1]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[2]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[3]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[4]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[5]) ^ tmdsencoder1_q_m8_n);
    tmdsencoder1_self[6] <= ((((((((((((tmdsencoder1_d1[0] ^ tmdsencoder1_d1[1]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[2]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[3]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[4]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[5]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[6]) ^ tmdsencoder1_q_m8_n);
    tmdsencoder1_self[7] <= ((((((((((((((tmdsencoder1_d1[0] ^ tmdsencoder1_d1[1]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[2]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[3]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[4]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[5]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[6]) ^ tmdsencoder1_q_m8_n) ^ tmdsencoder1_d1[7]) ^ tmdsencoder1_q_m8_n);
    tmdsencoder1_self[8] <= (~tmdsencoder1_q_m8_n);
    tmdsencoder1_n0q_m <= ((((((((~tmdsencoder1_self[0]) + (~tmdsencoder1_self[1])) + (~tmdsencoder1_self[2])) + (~tmdsencoder1_self[3])) + (~tmdsencoder1_self[4])) + (~tmdsencoder1_self[5])) + (~tmdsencoder1_self[6])) + (~tmdsencoder1_self[7]));
    tmdsencoder1_n1q_m <= (((((((tmdsencoder1_self[0] + tmdsencoder1_self[1]) + tmdsencoder1_self[2]) + tmdsencoder1_self[3]) + tmdsencoder1_self[4]) + tmdsencoder1_self[5]) + tmdsencoder1_self[6]) + tmdsencoder1_self[7]);
    tmdsencoder1_q_m_r <= tmdsencoder1_self;
    tmdsencoder1_new_c0 <= tmdsencoder1_c;
    tmdsencoder1_new_de0 <= tmdsencoder1_de;
    tmdsencoder1_new_c1 <= tmdsencoder1_new_c0;
    tmdsencoder1_new_de1 <= tmdsencoder1_new_de0;
    tmdsencoder1_new_c2 <= tmdsencoder1_new_c1;
    tmdsencoder1_new_de2 <= tmdsencoder1_new_de1;
    if (tmdsencoder1_new_de2) begin
        if (((tmdsencoder1_cnt == $signed({1'd0, 1'd0})) | $signed({1'd0, (tmdsencoder1_n1q_m == tmdsencoder1_n0q_m)}))) begin
            tmdsencoder1_out[9] <= (~tmdsencoder1_q_m_r[8]);
            tmdsencoder1_out[8] <= tmdsencoder1_q_m_r[8];
            if (tmdsencoder1_q_m_r[8]) begin
                tmdsencoder1_out[7:0] <= tmdsencoder1_q_m_r[7:0];
                tmdsencoder1_cnt <= ((tmdsencoder1_cnt + $signed({1'd0, tmdsencoder1_n1q_m})) - $signed({1'd0, tmdsencoder1_n0q_m}));
            end else begin
                tmdsencoder1_out[7:0] <= (~tmdsencoder1_q_m_r[7:0]);
                tmdsencoder1_cnt <= ((tmdsencoder1_cnt + $signed({1'd0, tmdsencoder1_n0q_m})) - $signed({1'd0, tmdsencoder1_n1q_m}));
            end
        end else begin
            if ((((~tmdsencoder1_cnt[5]) & $signed({1'd0, (tmdsencoder1_n1q_m > tmdsencoder1_n0q_m)})) | (tmdsencoder1_cnt[5] & $signed({1'd0, (tmdsencoder1_n0q_m > tmdsencoder1_n1q_m)})))) begin
                tmdsencoder1_out[9] <= 1'd1;
                tmdsencoder1_out[8] <= tmdsencoder1_q_m_r[8];
                tmdsencoder1_out[7:0] <= (~tmdsencoder1_q_m_r[7:0]);
                tmdsencoder1_cnt <= (((tmdsencoder1_cnt + $signed({1'd0, {tmdsencoder1_q_m_r[8], 1'd0}})) + $signed({1'd0, tmdsencoder1_n0q_m})) - $signed({1'd0, tmdsencoder1_n1q_m}));
            end else begin
                tmdsencoder1_out[9] <= 1'd0;
                tmdsencoder1_out[8] <= tmdsencoder1_q_m_r[8];
                tmdsencoder1_out[7:0] <= tmdsencoder1_q_m_r[7:0];
                tmdsencoder1_cnt <= (((tmdsencoder1_cnt - $signed({1'd0, {(~tmdsencoder1_q_m_r[8]), 1'd0}})) + $signed({1'd0, tmdsencoder1_n1q_m})) - $signed({1'd0, tmdsencoder1_n0q_m}));
            end
        end
    end else begin
        tmdsencoder1_out <= self1;
        tmdsencoder1_cnt <= 1'd0;
    end
    videohdmi10to1serializer1_cdc_graycounter2_q_binary <= videohdmi10to1serializer1_cdc_graycounter2_q_next_binary;
    videohdmi10to1serializer1_cdc_graycounter2_q <= videohdmi10to1serializer1_cdc_graycounter2_q_next;
    tmdsencoder2_n1d <= (((((((tmdsencoder2_d0[0] + tmdsencoder2_d0[1]) + tmdsencoder2_d0[2]) + tmdsencoder2_d0[3]) + tmdsencoder2_d0[4]) + tmdsencoder2_d0[5]) + tmdsencoder2_d0[6]) + tmdsencoder2_d0[7]);
    tmdsencoder2_d1 <= tmdsencoder2_d0;
    tmdsencoder2_self[0] <= tmdsencoder2_d1[0];
    tmdsencoder2_self[1] <= ((tmdsencoder2_d1[0] ^ tmdsencoder2_d1[1]) ^ tmdsencoder2_q_m8_n);
    tmdsencoder2_self[2] <= ((((tmdsencoder2_d1[0] ^ tmdsencoder2_d1[1]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[2]) ^ tmdsencoder2_q_m8_n);
    tmdsencoder2_self[3] <= ((((((tmdsencoder2_d1[0] ^ tmdsencoder2_d1[1]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[2]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[3]) ^ tmdsencoder2_q_m8_n);
    tmdsencoder2_self[4] <= ((((((((tmdsencoder2_d1[0] ^ tmdsencoder2_d1[1]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[2]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[3]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[4]) ^ tmdsencoder2_q_m8_n);
    tmdsencoder2_self[5] <= ((((((((((tmdsencoder2_d1[0] ^ tmdsencoder2_d1[1]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[2]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[3]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[4]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[5]) ^ tmdsencoder2_q_m8_n);
    tmdsencoder2_self[6] <= ((((((((((((tmdsencoder2_d1[0] ^ tmdsencoder2_d1[1]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[2]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[3]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[4]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[5]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[6]) ^ tmdsencoder2_q_m8_n);
    tmdsencoder2_self[7] <= ((((((((((((((tmdsencoder2_d1[0] ^ tmdsencoder2_d1[1]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[2]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[3]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[4]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[5]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[6]) ^ tmdsencoder2_q_m8_n) ^ tmdsencoder2_d1[7]) ^ tmdsencoder2_q_m8_n);
    tmdsencoder2_self[8] <= (~tmdsencoder2_q_m8_n);
    tmdsencoder2_n0q_m <= ((((((((~tmdsencoder2_self[0]) + (~tmdsencoder2_self[1])) + (~tmdsencoder2_self[2])) + (~tmdsencoder2_self[3])) + (~tmdsencoder2_self[4])) + (~tmdsencoder2_self[5])) + (~tmdsencoder2_self[6])) + (~tmdsencoder2_self[7]));
    tmdsencoder2_n1q_m <= (((((((tmdsencoder2_self[0] + tmdsencoder2_self[1]) + tmdsencoder2_self[2]) + tmdsencoder2_self[3]) + tmdsencoder2_self[4]) + tmdsencoder2_self[5]) + tmdsencoder2_self[6]) + tmdsencoder2_self[7]);
    tmdsencoder2_q_m_r <= tmdsencoder2_self;
    tmdsencoder2_new_c0 <= tmdsencoder2_c;
    tmdsencoder2_new_de0 <= tmdsencoder2_de;
    tmdsencoder2_new_c1 <= tmdsencoder2_new_c0;
    tmdsencoder2_new_de1 <= tmdsencoder2_new_de0;
    tmdsencoder2_new_c2 <= tmdsencoder2_new_c1;
    tmdsencoder2_new_de2 <= tmdsencoder2_new_de1;
    if (tmdsencoder2_new_de2) begin
        if (((tmdsencoder2_cnt == $signed({1'd0, 1'd0})) | $signed({1'd0, (tmdsencoder2_n1q_m == tmdsencoder2_n0q_m)}))) begin
            tmdsencoder2_out[9] <= (~tmdsencoder2_q_m_r[8]);
            tmdsencoder2_out[8] <= tmdsencoder2_q_m_r[8];
            if (tmdsencoder2_q_m_r[8]) begin
                tmdsencoder2_out[7:0] <= tmdsencoder2_q_m_r[7:0];
                tmdsencoder2_cnt <= ((tmdsencoder2_cnt + $signed({1'd0, tmdsencoder2_n1q_m})) - $signed({1'd0, tmdsencoder2_n0q_m}));
            end else begin
                tmdsencoder2_out[7:0] <= (~tmdsencoder2_q_m_r[7:0]);
                tmdsencoder2_cnt <= ((tmdsencoder2_cnt + $signed({1'd0, tmdsencoder2_n0q_m})) - $signed({1'd0, tmdsencoder2_n1q_m}));
            end
        end else begin
            if ((((~tmdsencoder2_cnt[5]) & $signed({1'd0, (tmdsencoder2_n1q_m > tmdsencoder2_n0q_m)})) | (tmdsencoder2_cnt[5] & $signed({1'd0, (tmdsencoder2_n0q_m > tmdsencoder2_n1q_m)})))) begin
                tmdsencoder2_out[9] <= 1'd1;
                tmdsencoder2_out[8] <= tmdsencoder2_q_m_r[8];
                tmdsencoder2_out[7:0] <= (~tmdsencoder2_q_m_r[7:0]);
                tmdsencoder2_cnt <= (((tmdsencoder2_cnt + $signed({1'd0, {tmdsencoder2_q_m_r[8], 1'd0}})) + $signed({1'd0, tmdsencoder2_n0q_m})) - $signed({1'd0, tmdsencoder2_n1q_m}));
            end else begin
                tmdsencoder2_out[9] <= 1'd0;
                tmdsencoder2_out[8] <= tmdsencoder2_q_m_r[8];
                tmdsencoder2_out[7:0] <= tmdsencoder2_q_m_r[7:0];
                tmdsencoder2_cnt <= (((tmdsencoder2_cnt - $signed({1'd0, {(~tmdsencoder2_q_m_r[8]), 1'd0}})) + $signed({1'd0, tmdsencoder2_n1q_m})) - $signed({1'd0, tmdsencoder2_n0q_m}));
            end
        end
    end else begin
        tmdsencoder2_out <= self2;
        tmdsencoder2_cnt <= 1'd0;
    end
    videohdmi10to1serializer2_cdc_graycounter4_q_binary <= videohdmi10to1serializer2_cdc_graycounter4_q_next_binary;
    videohdmi10to1serializer2_cdc_graycounter4_q <= videohdmi10to1serializer2_cdc_graycounter4_q_next;
    tmdsencoder3_n1d <= (((((((tmdsencoder3_d0[0] + tmdsencoder3_d0[1]) + tmdsencoder3_d0[2]) + tmdsencoder3_d0[3]) + tmdsencoder3_d0[4]) + tmdsencoder3_d0[5]) + tmdsencoder3_d0[6]) + tmdsencoder3_d0[7]);
    tmdsencoder3_d1 <= tmdsencoder3_d0;
    tmdsencoder3_self[0] <= tmdsencoder3_d1[0];
    tmdsencoder3_self[1] <= ((tmdsencoder3_d1[0] ^ tmdsencoder3_d1[1]) ^ tmdsencoder3_q_m8_n);
    tmdsencoder3_self[2] <= ((((tmdsencoder3_d1[0] ^ tmdsencoder3_d1[1]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[2]) ^ tmdsencoder3_q_m8_n);
    tmdsencoder3_self[3] <= ((((((tmdsencoder3_d1[0] ^ tmdsencoder3_d1[1]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[2]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[3]) ^ tmdsencoder3_q_m8_n);
    tmdsencoder3_self[4] <= ((((((((tmdsencoder3_d1[0] ^ tmdsencoder3_d1[1]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[2]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[3]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[4]) ^ tmdsencoder3_q_m8_n);
    tmdsencoder3_self[5] <= ((((((((((tmdsencoder3_d1[0] ^ tmdsencoder3_d1[1]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[2]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[3]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[4]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[5]) ^ tmdsencoder3_q_m8_n);
    tmdsencoder3_self[6] <= ((((((((((((tmdsencoder3_d1[0] ^ tmdsencoder3_d1[1]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[2]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[3]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[4]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[5]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[6]) ^ tmdsencoder3_q_m8_n);
    tmdsencoder3_self[7] <= ((((((((((((((tmdsencoder3_d1[0] ^ tmdsencoder3_d1[1]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[2]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[3]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[4]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[5]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[6]) ^ tmdsencoder3_q_m8_n) ^ tmdsencoder3_d1[7]) ^ tmdsencoder3_q_m8_n);
    tmdsencoder3_self[8] <= (~tmdsencoder3_q_m8_n);
    tmdsencoder3_n0q_m <= ((((((((~tmdsencoder3_self[0]) + (~tmdsencoder3_self[1])) + (~tmdsencoder3_self[2])) + (~tmdsencoder3_self[3])) + (~tmdsencoder3_self[4])) + (~tmdsencoder3_self[5])) + (~tmdsencoder3_self[6])) + (~tmdsencoder3_self[7]));
    tmdsencoder3_n1q_m <= (((((((tmdsencoder3_self[0] + tmdsencoder3_self[1]) + tmdsencoder3_self[2]) + tmdsencoder3_self[3]) + tmdsencoder3_self[4]) + tmdsencoder3_self[5]) + tmdsencoder3_self[6]) + tmdsencoder3_self[7]);
    tmdsencoder3_q_m_r <= tmdsencoder3_self;
    tmdsencoder3_new_c0 <= tmdsencoder3_c;
    tmdsencoder3_new_de0 <= tmdsencoder3_de;
    tmdsencoder3_new_c1 <= tmdsencoder3_new_c0;
    tmdsencoder3_new_de1 <= tmdsencoder3_new_de0;
    tmdsencoder3_new_c2 <= tmdsencoder3_new_c1;
    tmdsencoder3_new_de2 <= tmdsencoder3_new_de1;
    if (tmdsencoder3_new_de2) begin
        if (((tmdsencoder3_cnt == $signed({1'd0, 1'd0})) | $signed({1'd0, (tmdsencoder3_n1q_m == tmdsencoder3_n0q_m)}))) begin
            tmdsencoder3_out[9] <= (~tmdsencoder3_q_m_r[8]);
            tmdsencoder3_out[8] <= tmdsencoder3_q_m_r[8];
            if (tmdsencoder3_q_m_r[8]) begin
                tmdsencoder3_out[7:0] <= tmdsencoder3_q_m_r[7:0];
                tmdsencoder3_cnt <= ((tmdsencoder3_cnt + $signed({1'd0, tmdsencoder3_n1q_m})) - $signed({1'd0, tmdsencoder3_n0q_m}));
            end else begin
                tmdsencoder3_out[7:0] <= (~tmdsencoder3_q_m_r[7:0]);
                tmdsencoder3_cnt <= ((tmdsencoder3_cnt + $signed({1'd0, tmdsencoder3_n0q_m})) - $signed({1'd0, tmdsencoder3_n1q_m}));
            end
        end else begin
            if ((((~tmdsencoder3_cnt[5]) & $signed({1'd0, (tmdsencoder3_n1q_m > tmdsencoder3_n0q_m)})) | (tmdsencoder3_cnt[5] & $signed({1'd0, (tmdsencoder3_n0q_m > tmdsencoder3_n1q_m)})))) begin
                tmdsencoder3_out[9] <= 1'd1;
                tmdsencoder3_out[8] <= tmdsencoder3_q_m_r[8];
                tmdsencoder3_out[7:0] <= (~tmdsencoder3_q_m_r[7:0]);
                tmdsencoder3_cnt <= (((tmdsencoder3_cnt + $signed({1'd0, {tmdsencoder3_q_m_r[8], 1'd0}})) + $signed({1'd0, tmdsencoder3_n0q_m})) - $signed({1'd0, tmdsencoder3_n1q_m}));
            end else begin
                tmdsencoder3_out[9] <= 1'd0;
                tmdsencoder3_out[8] <= tmdsencoder3_q_m_r[8];
                tmdsencoder3_out[7:0] <= tmdsencoder3_q_m_r[7:0];
                tmdsencoder3_cnt <= (((tmdsencoder3_cnt - $signed({1'd0, {(~tmdsencoder3_q_m_r[8]), 1'd0}})) + $signed({1'd0, tmdsencoder3_n1q_m})) - $signed({1'd0, tmdsencoder3_n0q_m}));
            end
        end
    end else begin
        tmdsencoder3_out <= self3;
        tmdsencoder3_cnt <= 1'd0;
    end
    videohdmi10to1serializer3_cdc_graycounter6_q_binary <= videohdmi10to1serializer3_cdc_graycounter6_q_next_binary;
    videohdmi10to1serializer3_cdc_graycounter6_q <= videohdmi10to1serializer3_cdc_graycounter6_q_next;
    tmdsencoder4_n1d <= (((((((tmdsencoder4_d0[0] + tmdsencoder4_d0[1]) + tmdsencoder4_d0[2]) + tmdsencoder4_d0[3]) + tmdsencoder4_d0[4]) + tmdsencoder4_d0[5]) + tmdsencoder4_d0[6]) + tmdsencoder4_d0[7]);
    tmdsencoder4_d1 <= tmdsencoder4_d0;
    tmdsencoder4_self[0] <= tmdsencoder4_d1[0];
    tmdsencoder4_self[1] <= ((tmdsencoder4_d1[0] ^ tmdsencoder4_d1[1]) ^ tmdsencoder4_q_m8_n);
    tmdsencoder4_self[2] <= ((((tmdsencoder4_d1[0] ^ tmdsencoder4_d1[1]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[2]) ^ tmdsencoder4_q_m8_n);
    tmdsencoder4_self[3] <= ((((((tmdsencoder4_d1[0] ^ tmdsencoder4_d1[1]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[2]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[3]) ^ tmdsencoder4_q_m8_n);
    tmdsencoder4_self[4] <= ((((((((tmdsencoder4_d1[0] ^ tmdsencoder4_d1[1]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[2]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[3]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[4]) ^ tmdsencoder4_q_m8_n);
    tmdsencoder4_self[5] <= ((((((((((tmdsencoder4_d1[0] ^ tmdsencoder4_d1[1]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[2]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[3]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[4]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[5]) ^ tmdsencoder4_q_m8_n);
    tmdsencoder4_self[6] <= ((((((((((((tmdsencoder4_d1[0] ^ tmdsencoder4_d1[1]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[2]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[3]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[4]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[5]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[6]) ^ tmdsencoder4_q_m8_n);
    tmdsencoder4_self[7] <= ((((((((((((((tmdsencoder4_d1[0] ^ tmdsencoder4_d1[1]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[2]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[3]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[4]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[5]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[6]) ^ tmdsencoder4_q_m8_n) ^ tmdsencoder4_d1[7]) ^ tmdsencoder4_q_m8_n);
    tmdsencoder4_self[8] <= (~tmdsencoder4_q_m8_n);
    tmdsencoder4_n0q_m <= ((((((((~tmdsencoder4_self[0]) + (~tmdsencoder4_self[1])) + (~tmdsencoder4_self[2])) + (~tmdsencoder4_self[3])) + (~tmdsencoder4_self[4])) + (~tmdsencoder4_self[5])) + (~tmdsencoder4_self[6])) + (~tmdsencoder4_self[7]));
    tmdsencoder4_n1q_m <= (((((((tmdsencoder4_self[0] + tmdsencoder4_self[1]) + tmdsencoder4_self[2]) + tmdsencoder4_self[3]) + tmdsencoder4_self[4]) + tmdsencoder4_self[5]) + tmdsencoder4_self[6]) + tmdsencoder4_self[7]);
    tmdsencoder4_q_m_r <= tmdsencoder4_self;
    tmdsencoder4_new_c0 <= tmdsencoder4_c;
    tmdsencoder4_new_de0 <= tmdsencoder4_de;
    tmdsencoder4_new_c1 <= tmdsencoder4_new_c0;
    tmdsencoder4_new_de1 <= tmdsencoder4_new_de0;
    tmdsencoder4_new_c2 <= tmdsencoder4_new_c1;
    tmdsencoder4_new_de2 <= tmdsencoder4_new_de1;
    if (tmdsencoder4_new_de2) begin
        if (((tmdsencoder4_cnt == $signed({1'd0, 1'd0})) | $signed({1'd0, (tmdsencoder4_n1q_m == tmdsencoder4_n0q_m)}))) begin
            tmdsencoder4_out[9] <= (~tmdsencoder4_q_m_r[8]);
            tmdsencoder4_out[8] <= tmdsencoder4_q_m_r[8];
            if (tmdsencoder4_q_m_r[8]) begin
                tmdsencoder4_out[7:0] <= tmdsencoder4_q_m_r[7:0];
                tmdsencoder4_cnt <= ((tmdsencoder4_cnt + $signed({1'd0, tmdsencoder4_n1q_m})) - $signed({1'd0, tmdsencoder4_n0q_m}));
            end else begin
                tmdsencoder4_out[7:0] <= (~tmdsencoder4_q_m_r[7:0]);
                tmdsencoder4_cnt <= ((tmdsencoder4_cnt + $signed({1'd0, tmdsencoder4_n0q_m})) - $signed({1'd0, tmdsencoder4_n1q_m}));
            end
        end else begin
            if ((((~tmdsencoder4_cnt[5]) & $signed({1'd0, (tmdsencoder4_n1q_m > tmdsencoder4_n0q_m)})) | (tmdsencoder4_cnt[5] & $signed({1'd0, (tmdsencoder4_n0q_m > tmdsencoder4_n1q_m)})))) begin
                tmdsencoder4_out[9] <= 1'd1;
                tmdsencoder4_out[8] <= tmdsencoder4_q_m_r[8];
                tmdsencoder4_out[7:0] <= (~tmdsencoder4_q_m_r[7:0]);
                tmdsencoder4_cnt <= (((tmdsencoder4_cnt + $signed({1'd0, {tmdsencoder4_q_m_r[8], 1'd0}})) + $signed({1'd0, tmdsencoder4_n0q_m})) - $signed({1'd0, tmdsencoder4_n1q_m}));
            end else begin
                tmdsencoder4_out[9] <= 1'd0;
                tmdsencoder4_out[8] <= tmdsencoder4_q_m_r[8];
                tmdsencoder4_out[7:0] <= tmdsencoder4_q_m_r[7:0];
                tmdsencoder4_cnt <= (((tmdsencoder4_cnt - $signed({1'd0, {(~tmdsencoder4_q_m_r[8]), 1'd0}})) + $signed({1'd0, tmdsencoder4_n1q_m})) - $signed({1'd0, tmdsencoder4_n0q_m}));
            end
        end
    end else begin
        tmdsencoder4_out <= self4;
        tmdsencoder4_cnt <= 1'd0;
    end
    videohdmi10to1serializer4_cdc_graycounter8_q_binary <= videohdmi10to1serializer4_cdc_graycounter8_q_next_binary;
    videohdmi10to1serializer4_cdc_graycounter8_q <= videohdmi10to1serializer4_cdc_graycounter8_q_next;
    tmdsencoder5_n1d <= (((((((tmdsencoder5_d0[0] + tmdsencoder5_d0[1]) + tmdsencoder5_d0[2]) + tmdsencoder5_d0[3]) + tmdsencoder5_d0[4]) + tmdsencoder5_d0[5]) + tmdsencoder5_d0[6]) + tmdsencoder5_d0[7]);
    tmdsencoder5_d1 <= tmdsencoder5_d0;
    tmdsencoder5_self[0] <= tmdsencoder5_d1[0];
    tmdsencoder5_self[1] <= ((tmdsencoder5_d1[0] ^ tmdsencoder5_d1[1]) ^ tmdsencoder5_q_m8_n);
    tmdsencoder5_self[2] <= ((((tmdsencoder5_d1[0] ^ tmdsencoder5_d1[1]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[2]) ^ tmdsencoder5_q_m8_n);
    tmdsencoder5_self[3] <= ((((((tmdsencoder5_d1[0] ^ tmdsencoder5_d1[1]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[2]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[3]) ^ tmdsencoder5_q_m8_n);
    tmdsencoder5_self[4] <= ((((((((tmdsencoder5_d1[0] ^ tmdsencoder5_d1[1]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[2]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[3]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[4]) ^ tmdsencoder5_q_m8_n);
    tmdsencoder5_self[5] <= ((((((((((tmdsencoder5_d1[0] ^ tmdsencoder5_d1[1]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[2]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[3]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[4]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[5]) ^ tmdsencoder5_q_m8_n);
    tmdsencoder5_self[6] <= ((((((((((((tmdsencoder5_d1[0] ^ tmdsencoder5_d1[1]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[2]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[3]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[4]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[5]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[6]) ^ tmdsencoder5_q_m8_n);
    tmdsencoder5_self[7] <= ((((((((((((((tmdsencoder5_d1[0] ^ tmdsencoder5_d1[1]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[2]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[3]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[4]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[5]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[6]) ^ tmdsencoder5_q_m8_n) ^ tmdsencoder5_d1[7]) ^ tmdsencoder5_q_m8_n);
    tmdsencoder5_self[8] <= (~tmdsencoder5_q_m8_n);
    tmdsencoder5_n0q_m <= ((((((((~tmdsencoder5_self[0]) + (~tmdsencoder5_self[1])) + (~tmdsencoder5_self[2])) + (~tmdsencoder5_self[3])) + (~tmdsencoder5_self[4])) + (~tmdsencoder5_self[5])) + (~tmdsencoder5_self[6])) + (~tmdsencoder5_self[7]));
    tmdsencoder5_n1q_m <= (((((((tmdsencoder5_self[0] + tmdsencoder5_self[1]) + tmdsencoder5_self[2]) + tmdsencoder5_self[3]) + tmdsencoder5_self[4]) + tmdsencoder5_self[5]) + tmdsencoder5_self[6]) + tmdsencoder5_self[7]);
    tmdsencoder5_q_m_r <= tmdsencoder5_self;
    tmdsencoder5_new_c0 <= tmdsencoder5_c;
    tmdsencoder5_new_de0 <= tmdsencoder5_de;
    tmdsencoder5_new_c1 <= tmdsencoder5_new_c0;
    tmdsencoder5_new_de1 <= tmdsencoder5_new_de0;
    tmdsencoder5_new_c2 <= tmdsencoder5_new_c1;
    tmdsencoder5_new_de2 <= tmdsencoder5_new_de1;
    if (tmdsencoder5_new_de2) begin
        if (((tmdsencoder5_cnt == $signed({1'd0, 1'd0})) | $signed({1'd0, (tmdsencoder5_n1q_m == tmdsencoder5_n0q_m)}))) begin
            tmdsencoder5_out[9] <= (~tmdsencoder5_q_m_r[8]);
            tmdsencoder5_out[8] <= tmdsencoder5_q_m_r[8];
            if (tmdsencoder5_q_m_r[8]) begin
                tmdsencoder5_out[7:0] <= tmdsencoder5_q_m_r[7:0];
                tmdsencoder5_cnt <= ((tmdsencoder5_cnt + $signed({1'd0, tmdsencoder5_n1q_m})) - $signed({1'd0, tmdsencoder5_n0q_m}));
            end else begin
                tmdsencoder5_out[7:0] <= (~tmdsencoder5_q_m_r[7:0]);
                tmdsencoder5_cnt <= ((tmdsencoder5_cnt + $signed({1'd0, tmdsencoder5_n0q_m})) - $signed({1'd0, tmdsencoder5_n1q_m}));
            end
        end else begin
            if ((((~tmdsencoder5_cnt[5]) & $signed({1'd0, (tmdsencoder5_n1q_m > tmdsencoder5_n0q_m)})) | (tmdsencoder5_cnt[5] & $signed({1'd0, (tmdsencoder5_n0q_m > tmdsencoder5_n1q_m)})))) begin
                tmdsencoder5_out[9] <= 1'd1;
                tmdsencoder5_out[8] <= tmdsencoder5_q_m_r[8];
                tmdsencoder5_out[7:0] <= (~tmdsencoder5_q_m_r[7:0]);
                tmdsencoder5_cnt <= (((tmdsencoder5_cnt + $signed({1'd0, {tmdsencoder5_q_m_r[8], 1'd0}})) + $signed({1'd0, tmdsencoder5_n0q_m})) - $signed({1'd0, tmdsencoder5_n1q_m}));
            end else begin
                tmdsencoder5_out[9] <= 1'd0;
                tmdsencoder5_out[8] <= tmdsencoder5_q_m_r[8];
                tmdsencoder5_out[7:0] <= tmdsencoder5_q_m_r[7:0];
                tmdsencoder5_cnt <= (((tmdsencoder5_cnt - $signed({1'd0, {(~tmdsencoder5_q_m_r[8]), 1'd0}})) + $signed({1'd0, tmdsencoder5_n1q_m})) - $signed({1'd0, tmdsencoder5_n0q_m}));
            end
        end
    end else begin
        tmdsencoder5_out <= self5;
        tmdsencoder5_cnt <= 1'd0;
    end
    videohdmi10to1serializer5_cdc_graycounter10_q_binary <= videohdmi10to1serializer5_cdc_graycounter10_q_next_binary;
    videohdmi10to1serializer5_cdc_graycounter10_q <= videohdmi10to1serializer5_cdc_graycounter10_q_next;
    vtg_source_first <= ((vtg_source_payload_hcount == 1'd0) & (vtg_source_payload_vcount == 1'd0));
    vtg_source_last <= ((vtg_source_payload_hcount == vtg_hscan) & (vtg_source_payload_vcount == vtg_vscan));
    clockdomainsrenamer_state <= clockdomainsrenamer_next_state;
    if (vtg_hactive_clockdomainsrenamer_next_value_ce0) begin
        vtg_hactive <= vtg_hactive_clockdomainsrenamer_next_value0;
    end
    if (vtg_vactive_clockdomainsrenamer_next_value_ce1) begin
        vtg_vactive <= vtg_vactive_clockdomainsrenamer_next_value1;
    end
    if (vtg_source_payload_hres_clockdomainsrenamer_next_value_ce2) begin
        vtg_source_payload_hres <= vtg_source_payload_hres_clockdomainsrenamer_next_value2;
    end
    if (vtg_source_payload_vres_clockdomainsrenamer_next_value_ce3) begin
        vtg_source_payload_vres <= vtg_source_payload_vres_clockdomainsrenamer_next_value3;
    end
    if (vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4) begin
        vtg_source_payload_hcount <= vtg_source_payload_hcount_clockdomainsrenamer_next_value4;
    end
    if (vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5) begin
        vtg_source_payload_vcount <= vtg_source_payload_vcount_clockdomainsrenamer_next_value5;
    end
    if (vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6) begin
        vtg_source_payload_hsync <= vtg_source_payload_hsync_clockdomainsrenamer_next_value6;
    end
    if (vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7) begin
        vtg_source_payload_vsync <= vtg_source_payload_vsync_clockdomainsrenamer_next_value7;
    end
    if (vtg_reset) begin
        vtg_source_payload_hsync <= 1'd0;
        vtg_source_payload_vsync <= 1'd0;
        vtg_source_payload_hres <= 12'd0;
        vtg_source_payload_vres <= 12'd0;
        vtg_source_payload_hcount <= 12'd0;
        vtg_source_payload_vcount <= 12'd0;
        vtg_hactive <= 1'd0;
        vtg_vactive <= 1'd0;
        clockdomainsrenamer_state <= 1'd0;
    end
    vfb_cdc_cdc_graycounter1_q_binary <= vfb_cdc_cdc_graycounter1_q_next_binary;
    vfb_cdc_cdc_graycounter1_q <= vfb_cdc_cdc_graycounter1_q_next;
    videoframebuffer_state <= videoframebuffer_next_state;
    if (vfb_first_videoframebuffer_next_value_ce) begin
        vfb_first <= vfb_first_videoframebuffer_next_value;
    end
    if (vfb_reset) begin
        vfb_first <= 1'd0;
        videoframebuffer_state <= 1'd0;
    end
    if (hdmi_rst) begin
        tmdsencoder0_out <= 10'd0;
        tmdsencoder0_d1 <= 8'd0;
        tmdsencoder0_n1d <= 4'd0;
        tmdsencoder0_self <= 9'd0;
        tmdsencoder0_q_m_r <= 9'd0;
        tmdsencoder0_n0q_m <= 4'd0;
        tmdsencoder0_n1q_m <= 4'd0;
        tmdsencoder0_cnt <= 6'd0;
        tmdsencoder0_new_c0 <= 2'd0;
        tmdsencoder0_new_de0 <= 1'd0;
        tmdsencoder0_new_c1 <= 2'd0;
        tmdsencoder0_new_de1 <= 1'd0;
        tmdsencoder0_new_c2 <= 2'd0;
        tmdsencoder0_new_de2 <= 1'd0;
        videohdmi10to1serializer0_cdc_graycounter0_q <= 3'd0;
        videohdmi10to1serializer0_cdc_graycounter0_q_binary <= 3'd0;
        tmdsencoder1_out <= 10'd0;
        tmdsencoder1_d1 <= 8'd0;
        tmdsencoder1_n1d <= 4'd0;
        tmdsencoder1_self <= 9'd0;
        tmdsencoder1_q_m_r <= 9'd0;
        tmdsencoder1_n0q_m <= 4'd0;
        tmdsencoder1_n1q_m <= 4'd0;
        tmdsencoder1_cnt <= 6'd0;
        tmdsencoder1_new_c0 <= 2'd0;
        tmdsencoder1_new_de0 <= 1'd0;
        tmdsencoder1_new_c1 <= 2'd0;
        tmdsencoder1_new_de1 <= 1'd0;
        tmdsencoder1_new_c2 <= 2'd0;
        tmdsencoder1_new_de2 <= 1'd0;
        videohdmi10to1serializer1_cdc_graycounter2_q <= 3'd0;
        videohdmi10to1serializer1_cdc_graycounter2_q_binary <= 3'd0;
        tmdsencoder2_out <= 10'd0;
        tmdsencoder2_d1 <= 8'd0;
        tmdsencoder2_n1d <= 4'd0;
        tmdsencoder2_self <= 9'd0;
        tmdsencoder2_q_m_r <= 9'd0;
        tmdsencoder2_n0q_m <= 4'd0;
        tmdsencoder2_n1q_m <= 4'd0;
        tmdsencoder2_cnt <= 6'd0;
        tmdsencoder2_new_c0 <= 2'd0;
        tmdsencoder2_new_de0 <= 1'd0;
        tmdsencoder2_new_c1 <= 2'd0;
        tmdsencoder2_new_de1 <= 1'd0;
        tmdsencoder2_new_c2 <= 2'd0;
        tmdsencoder2_new_de2 <= 1'd0;
        videohdmi10to1serializer2_cdc_graycounter4_q <= 3'd0;
        videohdmi10to1serializer2_cdc_graycounter4_q_binary <= 3'd0;
        tmdsencoder3_out <= 10'd0;
        tmdsencoder3_d1 <= 8'd0;
        tmdsencoder3_n1d <= 4'd0;
        tmdsencoder3_self <= 9'd0;
        tmdsencoder3_q_m_r <= 9'd0;
        tmdsencoder3_n0q_m <= 4'd0;
        tmdsencoder3_n1q_m <= 4'd0;
        tmdsencoder3_cnt <= 6'd0;
        tmdsencoder3_new_c0 <= 2'd0;
        tmdsencoder3_new_de0 <= 1'd0;
        tmdsencoder3_new_c1 <= 2'd0;
        tmdsencoder3_new_de1 <= 1'd0;
        tmdsencoder3_new_c2 <= 2'd0;
        tmdsencoder3_new_de2 <= 1'd0;
        videohdmi10to1serializer3_cdc_graycounter6_q <= 3'd0;
        videohdmi10to1serializer3_cdc_graycounter6_q_binary <= 3'd0;
        tmdsencoder4_out <= 10'd0;
        tmdsencoder4_d1 <= 8'd0;
        tmdsencoder4_n1d <= 4'd0;
        tmdsencoder4_self <= 9'd0;
        tmdsencoder4_q_m_r <= 9'd0;
        tmdsencoder4_n0q_m <= 4'd0;
        tmdsencoder4_n1q_m <= 4'd0;
        tmdsencoder4_cnt <= 6'd0;
        tmdsencoder4_new_c0 <= 2'd0;
        tmdsencoder4_new_de0 <= 1'd0;
        tmdsencoder4_new_c1 <= 2'd0;
        tmdsencoder4_new_de1 <= 1'd0;
        tmdsencoder4_new_c2 <= 2'd0;
        tmdsencoder4_new_de2 <= 1'd0;
        videohdmi10to1serializer4_cdc_graycounter8_q <= 3'd0;
        videohdmi10to1serializer4_cdc_graycounter8_q_binary <= 3'd0;
        tmdsencoder5_out <= 10'd0;
        tmdsencoder5_d1 <= 8'd0;
        tmdsencoder5_n1d <= 4'd0;
        tmdsencoder5_self <= 9'd0;
        tmdsencoder5_q_m_r <= 9'd0;
        tmdsencoder5_n0q_m <= 4'd0;
        tmdsencoder5_n1q_m <= 4'd0;
        tmdsencoder5_cnt <= 6'd0;
        tmdsencoder5_new_c0 <= 2'd0;
        tmdsencoder5_new_de0 <= 1'd0;
        tmdsencoder5_new_c1 <= 2'd0;
        tmdsencoder5_new_de1 <= 1'd0;
        tmdsencoder5_new_c2 <= 2'd0;
        tmdsencoder5_new_de2 <= 1'd0;
        videohdmi10to1serializer5_cdc_graycounter10_q <= 3'd0;
        videohdmi10to1serializer5_cdc_graycounter10_q_binary <= 3'd0;
        vtg_source_payload_hsync <= 1'd0;
        vtg_source_payload_vsync <= 1'd0;
        vtg_source_payload_hres <= 12'd0;
        vtg_source_payload_vres <= 12'd0;
        vtg_source_payload_hcount <= 12'd0;
        vtg_source_payload_vcount <= 12'd0;
        vtg_hactive <= 1'd0;
        vtg_vactive <= 1'd0;
        vfb_cdc_cdc_graycounter1_q <= 3'd0;
        vfb_cdc_cdc_graycounter1_q_binary <= 3'd0;
        vfb_first <= 1'd0;
        clockdomainsrenamer_state <= 1'd0;
        videoframebuffer_state <= 1'd0;
    end
    multiregimpl1_regs0 <= videohdmi10to1serializer0_cdc_graycounter1_q;
    multiregimpl1_regs1 <= multiregimpl1_regs0;
    multiregimpl3_regs0 <= videohdmi10to1serializer1_cdc_graycounter3_q;
    multiregimpl3_regs1 <= multiregimpl3_regs0;
    multiregimpl5_regs0 <= videohdmi10to1serializer2_cdc_graycounter5_q;
    multiregimpl5_regs1 <= multiregimpl5_regs0;
    multiregimpl7_regs0 <= videohdmi10to1serializer3_cdc_graycounter7_q;
    multiregimpl7_regs1 <= multiregimpl7_regs0;
    multiregimpl9_regs0 <= videohdmi10to1serializer4_cdc_graycounter9_q;
    multiregimpl9_regs1 <= multiregimpl9_regs0;
    multiregimpl11_regs0 <= videohdmi10to1serializer5_cdc_graycounter11_q;
    multiregimpl11_regs1 <= multiregimpl11_regs0;
    multiregimpl12_regs0 <= vtg_enable_storage;
    multiregimpl12_regs1 <= multiregimpl12_regs0;
    multiregimpl13_regs0 <= vtg_hres_storage;
    multiregimpl13_regs1 <= multiregimpl13_regs0;
    multiregimpl14_regs0 <= vtg_hsync_start_storage;
    multiregimpl14_regs1 <= multiregimpl14_regs0;
    multiregimpl15_regs0 <= vtg_hsync_end_storage;
    multiregimpl15_regs1 <= multiregimpl15_regs0;
    multiregimpl16_regs0 <= vtg_hscan_storage;
    multiregimpl16_regs1 <= multiregimpl16_regs0;
    multiregimpl17_regs0 <= vtg_vres_storage;
    multiregimpl17_regs1 <= multiregimpl17_regs0;
    multiregimpl18_regs0 <= vtg_vsync_start_storage;
    multiregimpl18_regs1 <= multiregimpl18_regs0;
    multiregimpl19_regs0 <= vtg_vsync_end_storage;
    multiregimpl19_regs1 <= multiregimpl19_regs0;
    multiregimpl20_regs0 <= vtg_vscan_storage;
    multiregimpl20_regs1 <= multiregimpl20_regs0;
    multiregimpl21_regs0 <= vfb_cdc_cdc_graycounter0_q;
    multiregimpl21_regs1 <= multiregimpl21_regs0;
    multiregimpl23_regs0 <= vfb_dma_reset;
    multiregimpl23_regs1 <= multiregimpl23_regs0;
end

always @(posedge hdmi5x_clk) begin
    videohdmi10to1serializer0_cdc_graycounter1_q_binary <= videohdmi10to1serializer0_cdc_graycounter1_q_next_binary;
    videohdmi10to1serializer0_cdc_graycounter1_q <= videohdmi10to1serializer0_cdc_graycounter1_q_next;
    if (videohdmi10to1serializer0_i_inc) begin
        videohdmi10to1serializer0_i_count <= (videohdmi10to1serializer0_i_count + 1'd1);
        if ((videohdmi10to1serializer0_i_count == 1'd1)) begin
            videohdmi10to1serializer0_i_count <= 1'd0;
        end
    end
    if (videohdmi10to1serializer0_o_inc) begin
        videohdmi10to1serializer0_o_count <= (videohdmi10to1serializer0_o_count + 1'd1);
        if ((videohdmi10to1serializer0_o_count == 4'd9)) begin
            videohdmi10to1serializer0_o_count <= 1'd0;
        end
    end
    if ((videohdmi10to1serializer0_i_inc & (~videohdmi10to1serializer0_o_inc))) begin
        videohdmi10to1serializer0_level <= (videohdmi10to1serializer0_level + 4'd10);
    end
    if (((~videohdmi10to1serializer0_i_inc) & videohdmi10to1serializer0_o_inc)) begin
        videohdmi10to1serializer0_level <= (videohdmi10to1serializer0_level - 2'd2);
    end
    if ((videohdmi10to1serializer0_i_inc & videohdmi10to1serializer0_o_inc)) begin
        videohdmi10to1serializer0_level <= ((videohdmi10to1serializer0_level + 4'd10) - 2'd2);
    end
    if ((videohdmi10to1serializer0_sink_valid & videohdmi10to1serializer0_sink_ready)) begin
        case (videohdmi10to1serializer0_i_count)
            1'd0: begin
                videohdmi10to1serializer0_shift_register[19:10] <= videohdmi10to1serializer0_i_data;
            end
            1'd1: begin
                videohdmi10to1serializer0_shift_register[9:0] <= videohdmi10to1serializer0_i_data;
            end
        endcase
    end
    videohdmi10to1serializer1_cdc_graycounter3_q_binary <= videohdmi10to1serializer1_cdc_graycounter3_q_next_binary;
    videohdmi10to1serializer1_cdc_graycounter3_q <= videohdmi10to1serializer1_cdc_graycounter3_q_next;
    if (videohdmi10to1serializer1_i_inc) begin
        videohdmi10to1serializer1_i_count <= (videohdmi10to1serializer1_i_count + 1'd1);
        if ((videohdmi10to1serializer1_i_count == 1'd1)) begin
            videohdmi10to1serializer1_i_count <= 1'd0;
        end
    end
    if (videohdmi10to1serializer1_o_inc) begin
        videohdmi10to1serializer1_o_count <= (videohdmi10to1serializer1_o_count + 1'd1);
        if ((videohdmi10to1serializer1_o_count == 4'd9)) begin
            videohdmi10to1serializer1_o_count <= 1'd0;
        end
    end
    if ((videohdmi10to1serializer1_i_inc & (~videohdmi10to1serializer1_o_inc))) begin
        videohdmi10to1serializer1_level <= (videohdmi10to1serializer1_level + 4'd10);
    end
    if (((~videohdmi10to1serializer1_i_inc) & videohdmi10to1serializer1_o_inc)) begin
        videohdmi10to1serializer1_level <= (videohdmi10to1serializer1_level - 2'd2);
    end
    if ((videohdmi10to1serializer1_i_inc & videohdmi10to1serializer1_o_inc)) begin
        videohdmi10to1serializer1_level <= ((videohdmi10to1serializer1_level + 4'd10) - 2'd2);
    end
    if ((videohdmi10to1serializer1_sink_valid & videohdmi10to1serializer1_sink_ready)) begin
        case (videohdmi10to1serializer1_i_count)
            1'd0: begin
                videohdmi10to1serializer1_shift_register[19:10] <= videohdmi10to1serializer1_i_data;
            end
            1'd1: begin
                videohdmi10to1serializer1_shift_register[9:0] <= videohdmi10to1serializer1_i_data;
            end
        endcase
    end
    videohdmi10to1serializer2_cdc_graycounter5_q_binary <= videohdmi10to1serializer2_cdc_graycounter5_q_next_binary;
    videohdmi10to1serializer2_cdc_graycounter5_q <= videohdmi10to1serializer2_cdc_graycounter5_q_next;
    if (videohdmi10to1serializer2_i_inc) begin
        videohdmi10to1serializer2_i_count <= (videohdmi10to1serializer2_i_count + 1'd1);
        if ((videohdmi10to1serializer2_i_count == 1'd1)) begin
            videohdmi10to1serializer2_i_count <= 1'd0;
        end
    end
    if (videohdmi10to1serializer2_o_inc) begin
        videohdmi10to1serializer2_o_count <= (videohdmi10to1serializer2_o_count + 1'd1);
        if ((videohdmi10to1serializer2_o_count == 4'd9)) begin
            videohdmi10to1serializer2_o_count <= 1'd0;
        end
    end
    if ((videohdmi10to1serializer2_i_inc & (~videohdmi10to1serializer2_o_inc))) begin
        videohdmi10to1serializer2_level <= (videohdmi10to1serializer2_level + 4'd10);
    end
    if (((~videohdmi10to1serializer2_i_inc) & videohdmi10to1serializer2_o_inc)) begin
        videohdmi10to1serializer2_level <= (videohdmi10to1serializer2_level - 2'd2);
    end
    if ((videohdmi10to1serializer2_i_inc & videohdmi10to1serializer2_o_inc)) begin
        videohdmi10to1serializer2_level <= ((videohdmi10to1serializer2_level + 4'd10) - 2'd2);
    end
    if ((videohdmi10to1serializer2_sink_valid & videohdmi10to1serializer2_sink_ready)) begin
        case (videohdmi10to1serializer2_i_count)
            1'd0: begin
                videohdmi10to1serializer2_shift_register[19:10] <= videohdmi10to1serializer2_i_data;
            end
            1'd1: begin
                videohdmi10to1serializer2_shift_register[9:0] <= videohdmi10to1serializer2_i_data;
            end
        endcase
    end
    videohdmi10to1serializer3_cdc_graycounter7_q_binary <= videohdmi10to1serializer3_cdc_graycounter7_q_next_binary;
    videohdmi10to1serializer3_cdc_graycounter7_q <= videohdmi10to1serializer3_cdc_graycounter7_q_next;
    if (videohdmi10to1serializer3_i_inc) begin
        videohdmi10to1serializer3_i_count <= (videohdmi10to1serializer3_i_count + 1'd1);
        if ((videohdmi10to1serializer3_i_count == 1'd1)) begin
            videohdmi10to1serializer3_i_count <= 1'd0;
        end
    end
    if (videohdmi10to1serializer3_o_inc) begin
        videohdmi10to1serializer3_o_count <= (videohdmi10to1serializer3_o_count + 1'd1);
        if ((videohdmi10to1serializer3_o_count == 4'd9)) begin
            videohdmi10to1serializer3_o_count <= 1'd0;
        end
    end
    if ((videohdmi10to1serializer3_i_inc & (~videohdmi10to1serializer3_o_inc))) begin
        videohdmi10to1serializer3_level <= (videohdmi10to1serializer3_level + 4'd10);
    end
    if (((~videohdmi10to1serializer3_i_inc) & videohdmi10to1serializer3_o_inc)) begin
        videohdmi10to1serializer3_level <= (videohdmi10to1serializer3_level - 2'd2);
    end
    if ((videohdmi10to1serializer3_i_inc & videohdmi10to1serializer3_o_inc)) begin
        videohdmi10to1serializer3_level <= ((videohdmi10to1serializer3_level + 4'd10) - 2'd2);
    end
    if ((videohdmi10to1serializer3_sink_valid & videohdmi10to1serializer3_sink_ready)) begin
        case (videohdmi10to1serializer3_i_count)
            1'd0: begin
                videohdmi10to1serializer3_shift_register[19:10] <= videohdmi10to1serializer3_i_data;
            end
            1'd1: begin
                videohdmi10to1serializer3_shift_register[9:0] <= videohdmi10to1serializer3_i_data;
            end
        endcase
    end
    videohdmi10to1serializer4_cdc_graycounter9_q_binary <= videohdmi10to1serializer4_cdc_graycounter9_q_next_binary;
    videohdmi10to1serializer4_cdc_graycounter9_q <= videohdmi10to1serializer4_cdc_graycounter9_q_next;
    if (videohdmi10to1serializer4_i_inc) begin
        videohdmi10to1serializer4_i_count <= (videohdmi10to1serializer4_i_count + 1'd1);
        if ((videohdmi10to1serializer4_i_count == 1'd1)) begin
            videohdmi10to1serializer4_i_count <= 1'd0;
        end
    end
    if (videohdmi10to1serializer4_o_inc) begin
        videohdmi10to1serializer4_o_count <= (videohdmi10to1serializer4_o_count + 1'd1);
        if ((videohdmi10to1serializer4_o_count == 4'd9)) begin
            videohdmi10to1serializer4_o_count <= 1'd0;
        end
    end
    if ((videohdmi10to1serializer4_i_inc & (~videohdmi10to1serializer4_o_inc))) begin
        videohdmi10to1serializer4_level <= (videohdmi10to1serializer4_level + 4'd10);
    end
    if (((~videohdmi10to1serializer4_i_inc) & videohdmi10to1serializer4_o_inc)) begin
        videohdmi10to1serializer4_level <= (videohdmi10to1serializer4_level - 2'd2);
    end
    if ((videohdmi10to1serializer4_i_inc & videohdmi10to1serializer4_o_inc)) begin
        videohdmi10to1serializer4_level <= ((videohdmi10to1serializer4_level + 4'd10) - 2'd2);
    end
    if ((videohdmi10to1serializer4_sink_valid & videohdmi10to1serializer4_sink_ready)) begin
        case (videohdmi10to1serializer4_i_count)
            1'd0: begin
                videohdmi10to1serializer4_shift_register[19:10] <= videohdmi10to1serializer4_i_data;
            end
            1'd1: begin
                videohdmi10to1serializer4_shift_register[9:0] <= videohdmi10to1serializer4_i_data;
            end
        endcase
    end
    videohdmi10to1serializer5_cdc_graycounter11_q_binary <= videohdmi10to1serializer5_cdc_graycounter11_q_next_binary;
    videohdmi10to1serializer5_cdc_graycounter11_q <= videohdmi10to1serializer5_cdc_graycounter11_q_next;
    if (videohdmi10to1serializer5_i_inc) begin
        videohdmi10to1serializer5_i_count <= (videohdmi10to1serializer5_i_count + 1'd1);
        if ((videohdmi10to1serializer5_i_count == 1'd1)) begin
            videohdmi10to1serializer5_i_count <= 1'd0;
        end
    end
    if (videohdmi10to1serializer5_o_inc) begin
        videohdmi10to1serializer5_o_count <= (videohdmi10to1serializer5_o_count + 1'd1);
        if ((videohdmi10to1serializer5_o_count == 4'd9)) begin
            videohdmi10to1serializer5_o_count <= 1'd0;
        end
    end
    if ((videohdmi10to1serializer5_i_inc & (~videohdmi10to1serializer5_o_inc))) begin
        videohdmi10to1serializer5_level <= (videohdmi10to1serializer5_level + 4'd10);
    end
    if (((~videohdmi10to1serializer5_i_inc) & videohdmi10to1serializer5_o_inc)) begin
        videohdmi10to1serializer5_level <= (videohdmi10to1serializer5_level - 2'd2);
    end
    if ((videohdmi10to1serializer5_i_inc & videohdmi10to1serializer5_o_inc)) begin
        videohdmi10to1serializer5_level <= ((videohdmi10to1serializer5_level + 4'd10) - 2'd2);
    end
    if ((videohdmi10to1serializer5_sink_valid & videohdmi10to1serializer5_sink_ready)) begin
        case (videohdmi10to1serializer5_i_count)
            1'd0: begin
                videohdmi10to1serializer5_shift_register[19:10] <= videohdmi10to1serializer5_i_data;
            end
            1'd1: begin
                videohdmi10to1serializer5_shift_register[9:0] <= videohdmi10to1serializer5_i_data;
            end
        endcase
    end
    if (hdmi5x_rst) begin
        videohdmi10to1serializer0_cdc_graycounter1_q <= 3'd0;
        videohdmi10to1serializer0_cdc_graycounter1_q_binary <= 3'd0;
        videohdmi10to1serializer0_level <= 5'd0;
        videohdmi10to1serializer0_i_count <= 1'd0;
        videohdmi10to1serializer0_o_count <= 4'd0;
        videohdmi10to1serializer1_cdc_graycounter3_q <= 3'd0;
        videohdmi10to1serializer1_cdc_graycounter3_q_binary <= 3'd0;
        videohdmi10to1serializer1_level <= 5'd0;
        videohdmi10to1serializer1_i_count <= 1'd0;
        videohdmi10to1serializer1_o_count <= 4'd0;
        videohdmi10to1serializer2_cdc_graycounter5_q <= 3'd0;
        videohdmi10to1serializer2_cdc_graycounter5_q_binary <= 3'd0;
        videohdmi10to1serializer2_level <= 5'd0;
        videohdmi10to1serializer2_i_count <= 1'd0;
        videohdmi10to1serializer2_o_count <= 4'd0;
        videohdmi10to1serializer3_cdc_graycounter7_q <= 3'd0;
        videohdmi10to1serializer3_cdc_graycounter7_q_binary <= 3'd0;
        videohdmi10to1serializer3_level <= 5'd0;
        videohdmi10to1serializer3_i_count <= 1'd0;
        videohdmi10to1serializer3_o_count <= 4'd0;
        videohdmi10to1serializer4_cdc_graycounter9_q <= 3'd0;
        videohdmi10to1serializer4_cdc_graycounter9_q_binary <= 3'd0;
        videohdmi10to1serializer4_level <= 5'd0;
        videohdmi10to1serializer4_i_count <= 1'd0;
        videohdmi10to1serializer4_o_count <= 4'd0;
        videohdmi10to1serializer5_cdc_graycounter11_q <= 3'd0;
        videohdmi10to1serializer5_cdc_graycounter11_q_binary <= 3'd0;
        videohdmi10to1serializer5_level <= 5'd0;
        videohdmi10to1serializer5_i_count <= 1'd0;
        videohdmi10to1serializer5_o_count <= 4'd0;
    end
    multiregimpl0_regs0 <= videohdmi10to1serializer0_cdc_graycounter0_q;
    multiregimpl0_regs1 <= multiregimpl0_regs0;
    multiregimpl2_regs0 <= videohdmi10to1serializer1_cdc_graycounter2_q;
    multiregimpl2_regs1 <= multiregimpl2_regs0;
    multiregimpl4_regs0 <= videohdmi10to1serializer2_cdc_graycounter4_q;
    multiregimpl4_regs1 <= multiregimpl4_regs0;
    multiregimpl6_regs0 <= videohdmi10to1serializer3_cdc_graycounter6_q;
    multiregimpl6_regs1 <= multiregimpl6_regs0;
    multiregimpl8_regs0 <= videohdmi10to1serializer4_cdc_graycounter8_q;
    multiregimpl8_regs1 <= multiregimpl8_regs0;
    multiregimpl10_regs0 <= videohdmi10to1serializer5_cdc_graycounter10_q;
    multiregimpl10_regs1 <= multiregimpl10_regs0;
end

always @(posedge sys_clk) begin
    vfb_cdc_cdc_graycounter0_q_binary <= vfb_cdc_cdc_graycounter0_q_next_binary;
    vfb_cdc_cdc_graycounter0_q <= vfb_cdc_cdc_graycounter0_q_next;
    wishbone2csr_state <= wishbone2csr_next_state;
    bank_bus_dat_r <= 1'd0;
    if (sel) begin
        case (bank_bus_adr[8:0])
            1'd0: begin
                bank_bus_dat_r <= enable0_w;
            end
            1'd1: begin
                bank_bus_dat_r <= hres0_w;
            end
            2'd2: begin
                bank_bus_dat_r <= hsync_start0_w;
            end
            2'd3: begin
                bank_bus_dat_r <= hsync_end0_w;
            end
            3'd4: begin
                bank_bus_dat_r <= hscan0_w;
            end
            3'd5: begin
                bank_bus_dat_r <= vres0_w;
            end
            3'd6: begin
                bank_bus_dat_r <= vsync_start0_w;
            end
            3'd7: begin
                bank_bus_dat_r <= vsync_end0_w;
            end
            4'd8: begin
                bank_bus_dat_r <= vscan0_w;
            end
        endcase
    end
    if (enable0_re) begin
        vtg_enable_storage <= enable0_r;
    end
    vtg_enable_re <= enable0_re;
    if (hres0_re) begin
        vtg_hres_storage[11:0] <= hres0_r;
    end
    vtg_hres_re <= hres0_re;
    if (hsync_start0_re) begin
        vtg_hsync_start_storage[11:0] <= hsync_start0_r;
    end
    vtg_hsync_start_re <= hsync_start0_re;
    if (hsync_end0_re) begin
        vtg_hsync_end_storage[11:0] <= hsync_end0_r;
    end
    vtg_hsync_end_re <= hsync_end0_re;
    if (hscan0_re) begin
        vtg_hscan_storage[11:0] <= hscan0_r;
    end
    vtg_hscan_re <= hscan0_re;
    if (vres0_re) begin
        vtg_vres_storage[11:0] <= vres0_r;
    end
    vtg_vres_re <= vres0_re;
    if (vsync_start0_re) begin
        vtg_vsync_start_storage[11:0] <= vsync_start0_r;
    end
    vtg_vsync_start_re <= vsync_start0_re;
    if (vsync_end0_re) begin
        vtg_vsync_end_storage[11:0] <= vsync_end0_r;
    end
    vtg_vsync_end_re <= vsync_end0_re;
    if (vscan0_re) begin
        vtg_vscan_storage[11:0] <= vscan0_r;
    end
    vtg_vscan_re <= vscan0_re;
    if (sys_rst) begin
        vtg_enable_storage <= 1'd1;
        vtg_enable_re <= 1'd0;
        vtg_hres_storage <= 12'd720;
        vtg_hres_re <= 1'd0;
        vtg_hsync_start_storage <= 12'd760;
        vtg_hsync_start_re <= 1'd0;
        vtg_hsync_end_storage <= 12'd780;
        vtg_hsync_end_re <= 1'd0;
        vtg_hscan_storage <= 12'd819;
        vtg_hscan_re <= 1'd0;
        vtg_vres_storage <= 12'd720;
        vtg_vres_re <= 1'd0;
        vtg_vsync_start_storage <= 12'd744;
        vtg_vsync_start_re <= 1'd0;
        vtg_vsync_end_storage <= 12'd748;
        vtg_vsync_end_re <= 1'd0;
        vtg_vscan_storage <= 12'd759;
        vtg_vscan_re <= 1'd0;
        vfb_cdc_cdc_graycounter0_q <= 3'd0;
        vfb_cdc_cdc_graycounter0_q_binary <= 3'd0;
        wishbone2csr_state <= 1'd0;
    end
    multiregimpl22_regs0 <= vfb_cdc_cdc_graycounter1_q;
    multiregimpl22_regs1 <= multiregimpl22_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory storage: 4-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Sync  | Write: ---- | 
reg [11:0] storage[0:3];
reg [11:0] storage_dat0;
reg [11:0] storage_dat1;
always @(posedge hdmi_clk) begin
	if (videohdmi10to1serializer0_cdc_wrport_we)
		storage[videohdmi10to1serializer0_cdc_wrport_adr] <= videohdmi10to1serializer0_cdc_wrport_dat_w;
	storage_dat0 <= storage[videohdmi10to1serializer0_cdc_wrport_adr];
end
always @(posedge hdmi5x_clk) begin
	storage_dat1 <= storage[videohdmi10to1serializer0_cdc_rdport_adr];
end
assign videohdmi10to1serializer0_cdc_wrport_dat_r = storage_dat0;
assign videohdmi10to1serializer0_cdc_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 4-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Sync  | Write: ---- | 
reg [11:0] storage_1[0:3];
reg [11:0] storage_1_dat0;
reg [11:0] storage_1_dat1;
always @(posedge hdmi_clk) begin
	if (videohdmi10to1serializer1_cdc_wrport_we)
		storage_1[videohdmi10to1serializer1_cdc_wrport_adr] <= videohdmi10to1serializer1_cdc_wrport_dat_w;
	storage_1_dat0 <= storage_1[videohdmi10to1serializer1_cdc_wrport_adr];
end
always @(posedge hdmi5x_clk) begin
	storage_1_dat1 <= storage_1[videohdmi10to1serializer1_cdc_rdport_adr];
end
assign videohdmi10to1serializer1_cdc_wrport_dat_r = storage_1_dat0;
assign videohdmi10to1serializer1_cdc_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 4-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Sync  | Write: ---- | 
reg [11:0] storage_2[0:3];
reg [11:0] storage_2_dat0;
reg [11:0] storage_2_dat1;
always @(posedge hdmi_clk) begin
	if (videohdmi10to1serializer2_cdc_wrport_we)
		storage_2[videohdmi10to1serializer2_cdc_wrport_adr] <= videohdmi10to1serializer2_cdc_wrport_dat_w;
	storage_2_dat0 <= storage_2[videohdmi10to1serializer2_cdc_wrport_adr];
end
always @(posedge hdmi5x_clk) begin
	storage_2_dat1 <= storage_2[videohdmi10to1serializer2_cdc_rdport_adr];
end
assign videohdmi10to1serializer2_cdc_wrport_dat_r = storage_2_dat0;
assign videohdmi10to1serializer2_cdc_rdport_dat_r = storage_2_dat1;


//------------------------------------------------------------------------------
// Memory storage_3: 4-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Sync  | Write: ---- | 
reg [11:0] storage_3[0:3];
reg [11:0] storage_3_dat0;
reg [11:0] storage_3_dat1;
always @(posedge hdmi_clk) begin
	if (videohdmi10to1serializer3_cdc_wrport_we)
		storage_3[videohdmi10to1serializer3_cdc_wrport_adr] <= videohdmi10to1serializer3_cdc_wrport_dat_w;
	storage_3_dat0 <= storage_3[videohdmi10to1serializer3_cdc_wrport_adr];
end
always @(posedge hdmi5x_clk) begin
	storage_3_dat1 <= storage_3[videohdmi10to1serializer3_cdc_rdport_adr];
end
assign videohdmi10to1serializer3_cdc_wrport_dat_r = storage_3_dat0;
assign videohdmi10to1serializer3_cdc_rdport_dat_r = storage_3_dat1;


//------------------------------------------------------------------------------
// Memory storage_4: 4-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Sync  | Write: ---- | 
reg [11:0] storage_4[0:3];
reg [11:0] storage_4_dat0;
reg [11:0] storage_4_dat1;
always @(posedge hdmi_clk) begin
	if (videohdmi10to1serializer4_cdc_wrport_we)
		storage_4[videohdmi10to1serializer4_cdc_wrport_adr] <= videohdmi10to1serializer4_cdc_wrport_dat_w;
	storage_4_dat0 <= storage_4[videohdmi10to1serializer4_cdc_wrport_adr];
end
always @(posedge hdmi5x_clk) begin
	storage_4_dat1 <= storage_4[videohdmi10to1serializer4_cdc_rdport_adr];
end
assign videohdmi10to1serializer4_cdc_wrport_dat_r = storage_4_dat0;
assign videohdmi10to1serializer4_cdc_rdport_dat_r = storage_4_dat1;


//------------------------------------------------------------------------------
// Memory storage_5: 4-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Sync  | Write: ---- | 
reg [11:0] storage_5[0:3];
reg [11:0] storage_5_dat0;
reg [11:0] storage_5_dat1;
always @(posedge hdmi_clk) begin
	if (videohdmi10to1serializer5_cdc_wrport_we)
		storage_5[videohdmi10to1serializer5_cdc_wrport_adr] <= videohdmi10to1serializer5_cdc_wrport_dat_w;
	storage_5_dat0 <= storage_5[videohdmi10to1serializer5_cdc_wrport_adr];
end
always @(posedge hdmi5x_clk) begin
	storage_5_dat1 <= storage_5[videohdmi10to1serializer5_cdc_rdport_adr];
end
assign videohdmi10to1serializer5_cdc_wrport_dat_r = storage_5_dat0;
assign videohdmi10to1serializer5_cdc_rdport_dat_r = storage_5_dat1;


//------------------------------------------------------------------------------
// Memory storage_6: 4-words x 34-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 34 
// Port 1 | Read: Sync  | Write: ---- | 
reg [33:0] storage_6[0:3];
reg [33:0] storage_6_dat0;
reg [33:0] storage_6_dat1;
always @(posedge sys_clk) begin
	if (vfb_cdc_cdc_wrport_we)
		storage_6[vfb_cdc_cdc_wrport_adr] <= vfb_cdc_cdc_wrport_dat_w;
	storage_6_dat0 <= storage_6[vfb_cdc_cdc_wrport_adr];
end
always @(posedge hdmi_clk) begin
	storage_6_dat1 <= storage_6[vfb_cdc_cdc_rdport_adr];
end
assign vfb_cdc_cdc_wrport_dat_r = storage_6_dat0;
assign vfb_cdc_cdc_rdport_dat_r = storage_6_dat1;


//------------------------------------------------------------------------------
// Instance ODDRX1F of ODDRX1F Module.
//------------------------------------------------------------------------------
ODDRX1F ODDRX1F(
	// Inputs.
	.D0   (1'd1),
	.D1   (1'd0),
	.SCLK (hdmi_clk),

	// Outputs.
	.Q    (gpdi_clk_p)
);

//------------------------------------------------------------------------------
// Instance ODDRX1F_1 of ODDRX1F Module.
//------------------------------------------------------------------------------
ODDRX1F ODDRX1F_1(
	// Inputs.
	.D0   (1'd0),
	.D1   (1'd1),
	.SCLK (hdmi_clk),

	// Outputs.
	.Q    (gpdi_clk_n)
);

//------------------------------------------------------------------------------
// Instance ODDRX1F_2 of ODDRX1F Module.
//------------------------------------------------------------------------------
ODDRX1F ODDRX1F_2(
	// Inputs.
	.D0   (videohdmi10to1serializer0_source_payload_data[0]),
	.D1   (videohdmi10to1serializer0_source_payload_data[1]),
	.SCLK (hdmi5x_clk),

	// Outputs.
	.Q    (gpdi_data0_p)
);

//------------------------------------------------------------------------------
// Instance ODDRX1F_3 of ODDRX1F Module.
//------------------------------------------------------------------------------
ODDRX1F ODDRX1F_3(
	// Inputs.
	.D0   (videohdmi10to1serializer1_source_payload_data[0]),
	.D1   (videohdmi10to1serializer1_source_payload_data[1]),
	.SCLK (hdmi5x_clk),

	// Outputs.
	.Q    (gpdi_data1_p)
);

//------------------------------------------------------------------------------
// Instance ODDRX1F_4 of ODDRX1F Module.
//------------------------------------------------------------------------------
ODDRX1F ODDRX1F_4(
	// Inputs.
	.D0   (videohdmi10to1serializer2_source_payload_data[0]),
	.D1   (videohdmi10to1serializer2_source_payload_data[1]),
	.SCLK (hdmi5x_clk),

	// Outputs.
	.Q    (gpdi_data2_p)
);

//------------------------------------------------------------------------------
// Instance ODDRX1F_5 of ODDRX1F Module.
//------------------------------------------------------------------------------
ODDRX1F ODDRX1F_5(
	// Inputs.
	.D0   (videohdmi10to1serializer3_source_payload_data[0]),
	.D1   (videohdmi10to1serializer3_source_payload_data[1]),
	.SCLK (hdmi5x_clk),

	// Outputs.
	.Q    (gpdi_data0_n)
);

//------------------------------------------------------------------------------
// Instance ODDRX1F_6 of ODDRX1F Module.
//------------------------------------------------------------------------------
ODDRX1F ODDRX1F_6(
	// Inputs.
	.D0   (videohdmi10to1serializer4_source_payload_data[0]),
	.D1   (videohdmi10to1serializer4_source_payload_data[1]),
	.SCLK (hdmi5x_clk),

	// Outputs.
	.Q    (gpdi_data1_n)
);

//------------------------------------------------------------------------------
// Instance ODDRX1F_7 of ODDRX1F Module.
//------------------------------------------------------------------------------
ODDRX1F ODDRX1F_7(
	// Inputs.
	.D0   (videohdmi10to1serializer5_source_payload_data[0]),
	.D1   (videohdmi10to1serializer5_source_payload_data[1]),
	.SCLK (hdmi5x_clk),

	// Outputs.
	.Q    (gpdi_data2_n)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-04-23 09:11:34.
//------------------------------------------------------------------------------
